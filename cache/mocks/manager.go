// Code generated by mockery v2.53.4. DO NOT EDIT.
package mocks

import (
	driver "github.com/go-fork/providers/cache/driver"
	mock "github.com/stretchr/testify/mock"
	time "time"
)

// MockManager is an autogenerated mock type for the Manager type
type MockManager struct {
	mock.Mock
}

type MockManager_Expecter struct {
	mock *mock.Mock
}

func (_m *MockManager) EXPECT() *MockManager_Expecter {
	return &MockManager_Expecter{mock: &_m.Mock}
}

// AddDriver provides a mock function with given fields: name, _a1
func (_m *MockManager) AddDriver(name string, _a1 driver.Driver) {
	_m.Called(name, _a1)
}

// MockManager_AddDriver_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddDriver'
type MockManager_AddDriver_Call struct {
	*mock.Call
}

// AddDriver is a helper method to define mock.On call
//   - name string
//   - _a1 driver.Driver
func (_e *MockManager_Expecter) AddDriver(name interface{}, _a1 interface{}) *MockManager_AddDriver_Call {
	return &MockManager_AddDriver_Call{Call: _e.mock.On("AddDriver", name, _a1)}
}

func (_c *MockManager_AddDriver_Call) Run(run func(name string, _a1 driver.Driver)) *MockManager_AddDriver_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(driver.Driver))
	})
	return _c
}

func (_c *MockManager_AddDriver_Call) Return() *MockManager_AddDriver_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockManager_AddDriver_Call) RunAndReturn(run func(string, driver.Driver)) *MockManager_AddDriver_Call {
	_c.Run(run)
	return _c
}

// Close provides a mock function with no fields
func (_m *MockManager) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockManager_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockManager_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockManager_Expecter) Close() *MockManager_Close_Call {
	return &MockManager_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockManager_Close_Call) Run(run func()) *MockManager_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockManager_Close_Call) Return(_a0 error) *MockManager_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockManager_Close_Call) RunAndReturn(run func() error) *MockManager_Close_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: key
func (_m *MockManager) Delete(key string) error {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockManager_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockManager_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - key string
func (_e *MockManager_Expecter) Delete(key interface{}) *MockManager_Delete_Call {
	return &MockManager_Delete_Call{Call: _e.mock.On("Delete", key)}
}

func (_c *MockManager_Delete_Call) Run(run func(key string)) *MockManager_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockManager_Delete_Call) Return(_a0 error) *MockManager_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockManager_Delete_Call) RunAndReturn(run func(string) error) *MockManager_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteMultiple provides a mock function with given fields: keys
func (_m *MockManager) DeleteMultiple(keys []string) error {
	ret := _m.Called(keys)

	if len(ret) == 0 {
		panic("no return value specified for DeleteMultiple")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]string) error); ok {
		r0 = rf(keys)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockManager_DeleteMultiple_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteMultiple'
type MockManager_DeleteMultiple_Call struct {
	*mock.Call
}

// DeleteMultiple is a helper method to define mock.On call
//   - keys []string
func (_e *MockManager_Expecter) DeleteMultiple(keys interface{}) *MockManager_DeleteMultiple_Call {
	return &MockManager_DeleteMultiple_Call{Call: _e.mock.On("DeleteMultiple", keys)}
}

func (_c *MockManager_DeleteMultiple_Call) Run(run func(keys []string)) *MockManager_DeleteMultiple_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]string))
	})
	return _c
}

func (_c *MockManager_DeleteMultiple_Call) Return(_a0 error) *MockManager_DeleteMultiple_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockManager_DeleteMultiple_Call) RunAndReturn(run func([]string) error) *MockManager_DeleteMultiple_Call {
	_c.Call.Return(run)
	return _c
}

// Driver provides a mock function with given fields: name
func (_m *MockManager) Driver(name string) (driver.Driver, error) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for Driver")
	}

	var r0 driver.Driver
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (driver.Driver, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) driver.Driver); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(driver.Driver)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockManager_Driver_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Driver'
type MockManager_Driver_Call struct {
	*mock.Call
}

// Driver is a helper method to define mock.On call
//   - name string
func (_e *MockManager_Expecter) Driver(name interface{}) *MockManager_Driver_Call {
	return &MockManager_Driver_Call{Call: _e.mock.On("Driver", name)}
}

func (_c *MockManager_Driver_Call) Run(run func(name string)) *MockManager_Driver_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockManager_Driver_Call) Return(_a0 driver.Driver, _a1 error) *MockManager_Driver_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockManager_Driver_Call) RunAndReturn(run func(string) (driver.Driver, error)) *MockManager_Driver_Call {
	_c.Call.Return(run)
	return _c
}

// Flush provides a mock function with no fields
func (_m *MockManager) Flush() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Flush")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockManager_Flush_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Flush'
type MockManager_Flush_Call struct {
	*mock.Call
}

// Flush is a helper method to define mock.On call
func (_e *MockManager_Expecter) Flush() *MockManager_Flush_Call {
	return &MockManager_Flush_Call{Call: _e.mock.On("Flush")}
}

func (_c *MockManager_Flush_Call) Run(run func()) *MockManager_Flush_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockManager_Flush_Call) Return(_a0 error) *MockManager_Flush_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockManager_Flush_Call) RunAndReturn(run func() error) *MockManager_Flush_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: key
func (_m *MockManager) Get(key string) (interface{}, bool) {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 interface{}
	var r1 bool
	if rf, ok := ret.Get(0).(func(string) (interface{}, bool)); ok {
		return rf(key)
	}
	if rf, ok := ret.Get(0).(func(string) interface{}); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(string) bool); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// MockManager_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockManager_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - key string
func (_e *MockManager_Expecter) Get(key interface{}) *MockManager_Get_Call {
	return &MockManager_Get_Call{Call: _e.mock.On("Get", key)}
}

func (_c *MockManager_Get_Call) Run(run func(key string)) *MockManager_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockManager_Get_Call) Return(_a0 interface{}, _a1 bool) *MockManager_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockManager_Get_Call) RunAndReturn(run func(string) (interface{}, bool)) *MockManager_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetMultiple provides a mock function with given fields: keys
func (_m *MockManager) GetMultiple(keys []string) (map[string]interface{}, []string) {
	ret := _m.Called(keys)

	if len(ret) == 0 {
		panic("no return value specified for GetMultiple")
	}

	var r0 map[string]interface{}
	var r1 []string
	if rf, ok := ret.Get(0).(func([]string) (map[string]interface{}, []string)); ok {
		return rf(keys)
	}
	if rf, ok := ret.Get(0).(func([]string) map[string]interface{}); ok {
		r0 = rf(keys)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	if rf, ok := ret.Get(1).(func([]string) []string); ok {
		r1 = rf(keys)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]string)
		}
	}

	return r0, r1
}

// MockManager_GetMultiple_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMultiple'
type MockManager_GetMultiple_Call struct {
	*mock.Call
}

// GetMultiple is a helper method to define mock.On call
//   - keys []string
func (_e *MockManager_Expecter) GetMultiple(keys interface{}) *MockManager_GetMultiple_Call {
	return &MockManager_GetMultiple_Call{Call: _e.mock.On("GetMultiple", keys)}
}

func (_c *MockManager_GetMultiple_Call) Run(run func(keys []string)) *MockManager_GetMultiple_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]string))
	})
	return _c
}

func (_c *MockManager_GetMultiple_Call) Return(_a0 map[string]interface{}, _a1 []string) *MockManager_GetMultiple_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockManager_GetMultiple_Call) RunAndReturn(run func([]string) (map[string]interface{}, []string)) *MockManager_GetMultiple_Call {
	_c.Call.Return(run)
	return _c
}

// Has provides a mock function with given fields: key
func (_m *MockManager) Has(key string) bool {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Has")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockManager_Has_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Has'
type MockManager_Has_Call struct {
	*mock.Call
}

// Has is a helper method to define mock.On call
//   - key string
func (_e *MockManager_Expecter) Has(key interface{}) *MockManager_Has_Call {
	return &MockManager_Has_Call{Call: _e.mock.On("Has", key)}
}

func (_c *MockManager_Has_Call) Run(run func(key string)) *MockManager_Has_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockManager_Has_Call) Return(_a0 bool) *MockManager_Has_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockManager_Has_Call) RunAndReturn(run func(string) bool) *MockManager_Has_Call {
	_c.Call.Return(run)
	return _c
}

// Remember provides a mock function with given fields: key, ttl, callback
func (_m *MockManager) Remember(key string, ttl time.Duration, callback func() (interface{}, error)) (interface{}, error) {
	ret := _m.Called(key, ttl, callback)

	if len(ret) == 0 {
		panic("no return value specified for Remember")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(string, time.Duration, func() (interface{}, error)) (interface{}, error)); ok {
		return rf(key, ttl, callback)
	}
	if rf, ok := ret.Get(0).(func(string, time.Duration, func() (interface{}, error)) interface{}); ok {
		r0 = rf(key, ttl, callback)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(string, time.Duration, func() (interface{}, error)) error); ok {
		r1 = rf(key, ttl, callback)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockManager_Remember_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Remember'
type MockManager_Remember_Call struct {
	*mock.Call
}

// Remember is a helper method to define mock.On call
//   - key string
//   - ttl time.Duration
//   - callback func()(interface{} , error)
func (_e *MockManager_Expecter) Remember(key interface{}, ttl interface{}, callback interface{}) *MockManager_Remember_Call {
	return &MockManager_Remember_Call{Call: _e.mock.On("Remember", key, ttl, callback)}
}

func (_c *MockManager_Remember_Call) Run(run func(key string, ttl time.Duration, callback func() (interface{}, error))) *MockManager_Remember_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(time.Duration), args[2].(func() (interface{}, error)))
	})
	return _c
}

func (_c *MockManager_Remember_Call) Return(_a0 interface{}, _a1 error) *MockManager_Remember_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockManager_Remember_Call) RunAndReturn(run func(string, time.Duration, func() (interface{}, error)) (interface{}, error)) *MockManager_Remember_Call {
	_c.Call.Return(run)
	return _c
}

// Set provides a mock function with given fields: key, value, ttl
func (_m *MockManager) Set(key string, value interface{}, ttl time.Duration) error {
	ret := _m.Called(key, value, ttl)

	if len(ret) == 0 {
		panic("no return value specified for Set")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, interface{}, time.Duration) error); ok {
		r0 = rf(key, value, ttl)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockManager_Set_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Set'
type MockManager_Set_Call struct {
	*mock.Call
}

// Set is a helper method to define mock.On call
//   - key string
//   - value interface{}
//   - ttl time.Duration
func (_e *MockManager_Expecter) Set(key interface{}, value interface{}, ttl interface{}) *MockManager_Set_Call {
	return &MockManager_Set_Call{Call: _e.mock.On("Set", key, value, ttl)}
}

func (_c *MockManager_Set_Call) Run(run func(key string, value interface{}, ttl time.Duration)) *MockManager_Set_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(interface{}), args[2].(time.Duration))
	})
	return _c
}

func (_c *MockManager_Set_Call) Return(_a0 error) *MockManager_Set_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockManager_Set_Call) RunAndReturn(run func(string, interface{}, time.Duration) error) *MockManager_Set_Call {
	_c.Call.Return(run)
	return _c
}

// SetDefaultDriver provides a mock function with given fields: name
func (_m *MockManager) SetDefaultDriver(name string) {
	_m.Called(name)
}

// MockManager_SetDefaultDriver_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetDefaultDriver'
type MockManager_SetDefaultDriver_Call struct {
	*mock.Call
}

// SetDefaultDriver is a helper method to define mock.On call
//   - name string
func (_e *MockManager_Expecter) SetDefaultDriver(name interface{}) *MockManager_SetDefaultDriver_Call {
	return &MockManager_SetDefaultDriver_Call{Call: _e.mock.On("SetDefaultDriver", name)}
}

func (_c *MockManager_SetDefaultDriver_Call) Run(run func(name string)) *MockManager_SetDefaultDriver_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockManager_SetDefaultDriver_Call) Return() *MockManager_SetDefaultDriver_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockManager_SetDefaultDriver_Call) RunAndReturn(run func(string)) *MockManager_SetDefaultDriver_Call {
	_c.Run(run)
	return _c
}

// SetMultiple provides a mock function with given fields: values, ttl
func (_m *MockManager) SetMultiple(values map[string]interface{}, ttl time.Duration) error {
	ret := _m.Called(values, ttl)

	if len(ret) == 0 {
		panic("no return value specified for SetMultiple")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(map[string]interface{}, time.Duration) error); ok {
		r0 = rf(values, ttl)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockManager_SetMultiple_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetMultiple'
type MockManager_SetMultiple_Call struct {
	*mock.Call
}

// SetMultiple is a helper method to define mock.On call
//   - values map[string]interface{}
//   - ttl time.Duration
func (_e *MockManager_Expecter) SetMultiple(values interface{}, ttl interface{}) *MockManager_SetMultiple_Call {
	return &MockManager_SetMultiple_Call{Call: _e.mock.On("SetMultiple", values, ttl)}
}

func (_c *MockManager_SetMultiple_Call) Run(run func(values map[string]interface{}, ttl time.Duration)) *MockManager_SetMultiple_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(map[string]interface{}), args[1].(time.Duration))
	})
	return _c
}

func (_c *MockManager_SetMultiple_Call) Return(_a0 error) *MockManager_SetMultiple_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockManager_SetMultiple_Call) RunAndReturn(run func(map[string]interface{}, time.Duration) error) *MockManager_SetMultiple_Call {
	_c.Call.Return(run)
	return _c
}

// Stats provides a mock function with no fields
func (_m *MockManager) Stats() map[string]map[string]interface{} {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Stats")
	}

	var r0 map[string]map[string]interface{}
	if rf, ok := ret.Get(0).(func() map[string]map[string]interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]map[string]interface{})
		}
	}

	return r0
}

// MockManager_Stats_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stats'
type MockManager_Stats_Call struct {
	*mock.Call
}

// Stats is a helper method to define mock.On call
func (_e *MockManager_Expecter) Stats() *MockManager_Stats_Call {
	return &MockManager_Stats_Call{Call: _e.mock.On("Stats")}
}

func (_c *MockManager_Stats_Call) Run(run func()) *MockManager_Stats_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockManager_Stats_Call) Return(_a0 map[string]map[string]interface{}) *MockManager_Stats_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockManager_Stats_Call) RunAndReturn(run func() map[string]map[string]interface{}) *MockManager_Stats_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockManager creates a new instance of MockManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockManager {
	mock := &MockManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
