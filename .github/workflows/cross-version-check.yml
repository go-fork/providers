name: Cross-Version Compatibility

on:
  push:
    branches: [ main ]
    paths:
      - '**.go'
      - '**/go.mod'
  pull_request:
    branches: [ main ]
    paths:
      - '**.go'
      - '**/go.mod'
  schedule:
    - cron: '0 4 * * 1' # Run at 4 AM UTC every Monday
  workflow_dispatch:

jobs:
  test-go-versions:
    name: Test with Go ${{ matrix.go-version }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        go-version: ['1.20.x', '1.21.x', '1.22.x', '1.23.x', 'tip']
        os: [ubuntu-latest]
        include:
          - go-version: '1.23.x'
            os: macos-latest
          - go-version: '1.23.x'
            os: windows-latest
      fail-fast: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Go ${{ matrix.go-version }}
        uses: actions/setup-go@v4
        with:
          go-version: ${{ matrix.go-version == 'tip' && 'stable' || matrix.go-version }}
          cache: true
      
      - name: Install Go tip (if requested)
        if: matrix.go-version == 'tip'
        run: |
          go install golang.org/dl/gotip@latest
          gotip download
          echo "GOROOT=$(gotip env GOROOT)" >> $GITHUB_ENV
          echo "$(gotip env GOROOT)/bin" >> $GITHUB_PATH
      
      - name: List modules to test
        id: list-modules
        run: |
          MODULES=$(find . -name "go.mod" -exec dirname {} \; | sort | tr '\n' ' ')
          echo "Found modules: $MODULES"
          echo "modules=$MODULES" >> $GITHUB_OUTPUT
      
      - name: Run tests for each module
        run: |
          IFS=' ' read -ra MODULES <<< "${{ steps.list-modules.outputs.modules }}"
          
          for mod_dir in "${MODULES[@]}"; do
            if [ -z "$mod_dir" ]; then continue; fi
            
            echo "Testing module in $mod_dir"
            cd "$mod_dir"
            
            # Use tip command if testing with Go tip
            GO_CMD=${{ matrix.go-version == 'tip' && 'gotip' || 'go' }}
            
            # Run tests
            $GO_CMD test -v ./...
            TEST_STATUS=$?
            
            if [ $TEST_STATUS -ne 0 ]; then
              echo "::error::Tests failed for $mod_dir with Go ${{ matrix.go-version }}"
              # Continue testing other modules but mark the run as failed
              exit_status=1
            fi
            
            cd - > /dev/null
          done
          
          exit ${exit_status:-0}
      
      - name: Verify build with each Go version
        run: |
          IFS=' ' read -ra MODULES <<< "${{ steps.list-modules.outputs.modules }}"
          
          for mod_dir in "${MODULES[@]}"; do
            if [ -z "$mod_dir" ]; then continue; fi
            
            echo "Building module in $mod_dir"
            cd "$mod_dir"
            
            # Use tip command if testing with Go tip
            GO_CMD=${{ matrix.go-version == 'tip' && 'gotip' || 'go' }}
            
            # Build the package
            $GO_CMD build ./...
            BUILD_STATUS=$?
            
            if [ $BUILD_STATUS -ne 0 ]; then
              echo "::error::Build failed for $mod_dir with Go ${{ matrix.go-version }}"
              # Continue building other modules but mark the run as failed
              exit_status=1
            fi
            
            cd - > /dev/null
          done
          
          exit ${exit_status:-0}
