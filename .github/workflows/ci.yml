name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: ['1.23.x', '1.24.x']
        os: [ubuntu-latest, macos-latest]
      fail-fast: false

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ matrix.go-version }}
        cache: true

    - name: Test all modules
      run: |
        # Test each module separately
        for module in cache config log mailer queue scheduler sms; do
          if [ -d "$module" ] && [ -f "$module/go.mod" ]; then
            echo "Testing module: $module"
            cd $module
            go mod download
            go test -v -race -coverprofile=coverage.txt -covermode=atomic ./...
            cd ..
          fi
        done
      
    - name: Upload coverage report
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.txt
        flags: unittests
        name: codecov-umbrella-${{ matrix.os }}-${{ matrix.go-version }}

  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.23.x'
        cache: true
    
    - name: Install golangci-lint
      run: |
        curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.54.2
        echo "$(go env GOPATH)/bin" >> $GITHUB_PATH
        
    - name: Lint all modules
      run: |
        # Lint each module separately
        for module in cache config log mailer queue scheduler sms; do
          if [ -d "$module" ] && [ -f "$module/go.mod" ]; then
            echo "Linting module: $module"
            cd $module
            golangci-lint run --timeout=5m
            cd ..
          fi
        done
