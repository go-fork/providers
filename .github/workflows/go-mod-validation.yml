name: Go Module Validation

on:
  push:
    branches: [ main ]
    paths:
      - '**/go.mod'
      - '**/go.sum'
  pull_request:
    branches: [ main ]
    paths:
      - '**/go.mod'
      - '**/go.sum'
  workflow_dispatch:

jobs:
  validate-modules:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.23.x'
          cache: true
      
      - name: Validate go.mod files
        run: |
          # Create an array of directories containing go.mod files
          MODULES=($(find . -name "go.mod" -exec dirname {} \; | sort))
          
          for mod_dir in "${MODULES[@]}"; do
            echo "Validating $mod_dir"
            cd "$mod_dir"
            
            # Verify go.mod is tidy
            go mod tidy
            if ! git diff --exit-code go.mod go.sum &>/dev/null; then
              echo "ERROR: $mod_dir/go.mod or go.sum is not tidy"
              git diff go.mod go.sum
              exit 1
            fi
            
            # Verify all dependencies
            echo "Verifying dependencies in $mod_dir"
            go mod verify
            
            # Return to the original directory
            cd - > /dev/null
          done
      
      - name: Check for dependency versions consistency
        run: |
          echo "Checking for consistent dependency versions across modules..."
          
          # Create a temporary file to store dependency information
          touch dep_versions.txt
          
          # Find all go.mod files and extract dependency versions
          find . -name "go.mod" | while read -r mod_file; do
            module_dir=$(dirname "$mod_file")
            echo "Processing $mod_file"
            
            # Extract dependencies and versions
            grep -E '^\trequire .+' "$mod_file" | while read -r dep_line; do
              # Extract the dependency name and version
              if [[ "$dep_line" =~ require\ ([^[:space:]]+)\ ([^[:space:]]+) ]]; then
                dep="${BASH_REMATCH[1]}"
                ver="${BASH_REMATCH[2]}"
                
                # Skip internal dependencies
                if [[ "$dep" == "github.com/go-fork/"* ]]; then
                  continue
                fi
                
                echo "$dep $ver $module_dir" >> dep_versions.txt
              fi
            done
            
            # Check for indirect dependencies too
            grep -E '^\t[^[:space:]]+ [^[:space:]]+ // indirect' "$mod_file" | while read -r dep_line; do
              if [[ "$dep_line" =~ ([^[:space:]]+)\ ([^[:space:]]+)\ // ]]; then
                dep="${BASH_REMATCH[1]}"
                ver="${BASH_REMATCH[2]}"
                
                # Skip internal dependencies
                if [[ "$dep" == "github.com/go-fork/"* ]]; then
                  continue
                fi
                
                echo "$dep $ver $module_dir" >> dep_versions.txt
              fi
            done
          done
          
          # Find dependencies with different versions
          inconsistent_deps=$(cat dep_versions.txt | awk '{print $1, $2}' | sort | uniq -c | sort -nr | awk '$1 == 1 {print $2}' | sort | uniq -d)
          
          if [ -n "$inconsistent_deps" ]; then
            echo "WARNING: Found dependencies with inconsistent versions:"
            
            for dep in $inconsistent_deps; do
              echo "Dependency: $dep"
              grep "^$dep " dep_versions.txt | sort
              echo ""
            done
            
            echo "Consider aligning these versions across modules."
            # Not failing the build, just a warning
          else
            echo "All dependencies have consistent versions across modules!"
          fi
          
          # Clean up
          rm dep_versions.txt
