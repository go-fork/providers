// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	io "io"

	fsnotify "github.com/fsnotify/fsnotify"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// MockManager is an autogenerated mock type for the Manager type
type MockManager struct {
	mock.Mock
}

type MockManager_Expecter struct {
	mock *mock.Mock
}

func (_m *MockManager) EXPECT() *MockManager_Expecter {
	return &MockManager_Expecter{mock: &_m.Mock}
}

// AddConfigPath provides a mock function with given fields: path
func (_m *MockManager) AddConfigPath(path string) {
	_m.Called(path)
}

// MockManager_AddConfigPath_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddConfigPath'
type MockManager_AddConfigPath_Call struct {
	*mock.Call
}

// AddConfigPath is a helper method to define mock.On call
//   - path string
func (_e *MockManager_Expecter) AddConfigPath(path interface{}) *MockManager_AddConfigPath_Call {
	return &MockManager_AddConfigPath_Call{Call: _e.mock.On("AddConfigPath", path)}
}

func (_c *MockManager_AddConfigPath_Call) Run(run func(path string)) *MockManager_AddConfigPath_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockManager_AddConfigPath_Call) Return() *MockManager_AddConfigPath_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockManager_AddConfigPath_Call) RunAndReturn(run func(string)) *MockManager_AddConfigPath_Call {
	_c.Run(run)
	return _c
}

// AllKeys provides a mock function with no fields
func (_m *MockManager) AllKeys() []string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for AllKeys")
	}

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// MockManager_AllKeys_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AllKeys'
type MockManager_AllKeys_Call struct {
	*mock.Call
}

// AllKeys is a helper method to define mock.On call
func (_e *MockManager_Expecter) AllKeys() *MockManager_AllKeys_Call {
	return &MockManager_AllKeys_Call{Call: _e.mock.On("AllKeys")}
}

func (_c *MockManager_AllKeys_Call) Run(run func()) *MockManager_AllKeys_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockManager_AllKeys_Call) Return(_a0 []string) *MockManager_AllKeys_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockManager_AllKeys_Call) RunAndReturn(run func() []string) *MockManager_AllKeys_Call {
	_c.Call.Return(run)
	return _c
}

// AllSettings provides a mock function with no fields
func (_m *MockManager) AllSettings() map[string]interface{} {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for AllSettings")
	}

	var r0 map[string]interface{}
	if rf, ok := ret.Get(0).(func() map[string]interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	return r0
}

// MockManager_AllSettings_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AllSettings'
type MockManager_AllSettings_Call struct {
	*mock.Call
}

// AllSettings is a helper method to define mock.On call
func (_e *MockManager_Expecter) AllSettings() *MockManager_AllSettings_Call {
	return &MockManager_AllSettings_Call{Call: _e.mock.On("AllSettings")}
}

func (_c *MockManager_AllSettings_Call) Run(run func()) *MockManager_AllSettings_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockManager_AllSettings_Call) Return(_a0 map[string]interface{}) *MockManager_AllSettings_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockManager_AllSettings_Call) RunAndReturn(run func() map[string]interface{}) *MockManager_AllSettings_Call {
	_c.Call.Return(run)
	return _c
}

// AutomaticEnv provides a mock function with no fields
func (_m *MockManager) AutomaticEnv() {
	_m.Called()
}

// MockManager_AutomaticEnv_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AutomaticEnv'
type MockManager_AutomaticEnv_Call struct {
	*mock.Call
}

// AutomaticEnv is a helper method to define mock.On call
func (_e *MockManager_Expecter) AutomaticEnv() *MockManager_AutomaticEnv_Call {
	return &MockManager_AutomaticEnv_Call{Call: _e.mock.On("AutomaticEnv")}
}

func (_c *MockManager_AutomaticEnv_Call) Run(run func()) *MockManager_AutomaticEnv_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockManager_AutomaticEnv_Call) Return() *MockManager_AutomaticEnv_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockManager_AutomaticEnv_Call) RunAndReturn(run func()) *MockManager_AutomaticEnv_Call {
	_c.Run(run)
	return _c
}

// BindEnv provides a mock function with given fields: input
func (_m *MockManager) BindEnv(input ...string) error {
	_va := make([]interface{}, len(input))
	for _i := range input {
		_va[_i] = input[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for BindEnv")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(...string) error); ok {
		r0 = rf(input...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockManager_BindEnv_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BindEnv'
type MockManager_BindEnv_Call struct {
	*mock.Call
}

// BindEnv is a helper method to define mock.On call
//   - input ...string
func (_e *MockManager_Expecter) BindEnv(input ...interface{}) *MockManager_BindEnv_Call {
	return &MockManager_BindEnv_Call{Call: _e.mock.On("BindEnv",
		append([]interface{}{}, input...)...)}
}

func (_c *MockManager_BindEnv_Call) Run(run func(input ...string)) *MockManager_BindEnv_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *MockManager_BindEnv_Call) Return(_a0 error) *MockManager_BindEnv_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockManager_BindEnv_Call) RunAndReturn(run func(...string) error) *MockManager_BindEnv_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: key
func (_m *MockManager) Get(key string) (interface{}, bool) {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 interface{}
	var r1 bool
	if rf, ok := ret.Get(0).(func(string) (interface{}, bool)); ok {
		return rf(key)
	}
	if rf, ok := ret.Get(0).(func(string) interface{}); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(string) bool); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// MockManager_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockManager_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - key string
func (_e *MockManager_Expecter) Get(key interface{}) *MockManager_Get_Call {
	return &MockManager_Get_Call{Call: _e.mock.On("Get", key)}
}

func (_c *MockManager_Get_Call) Run(run func(key string)) *MockManager_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockManager_Get_Call) Return(_a0 interface{}, _a1 bool) *MockManager_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockManager_Get_Call) RunAndReturn(run func(string) (interface{}, bool)) *MockManager_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetBool provides a mock function with given fields: key
func (_m *MockManager) GetBool(key string) (bool, bool) {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for GetBool")
	}

	var r0 bool
	var r1 bool
	if rf, ok := ret.Get(0).(func(string) (bool, bool)); ok {
		return rf(key)
	}
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string) bool); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// MockManager_GetBool_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBool'
type MockManager_GetBool_Call struct {
	*mock.Call
}

// GetBool is a helper method to define mock.On call
//   - key string
func (_e *MockManager_Expecter) GetBool(key interface{}) *MockManager_GetBool_Call {
	return &MockManager_GetBool_Call{Call: _e.mock.On("GetBool", key)}
}

func (_c *MockManager_GetBool_Call) Run(run func(key string)) *MockManager_GetBool_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockManager_GetBool_Call) Return(_a0 bool, _a1 bool) *MockManager_GetBool_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockManager_GetBool_Call) RunAndReturn(run func(string) (bool, bool)) *MockManager_GetBool_Call {
	_c.Call.Return(run)
	return _c
}

// GetDuration provides a mock function with given fields: key
func (_m *MockManager) GetDuration(key string) (time.Duration, bool) {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for GetDuration")
	}

	var r0 time.Duration
	var r1 bool
	if rf, ok := ret.Get(0).(func(string) (time.Duration, bool)); ok {
		return rf(key)
	}
	if rf, ok := ret.Get(0).(func(string) time.Duration); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	if rf, ok := ret.Get(1).(func(string) bool); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// MockManager_GetDuration_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDuration'
type MockManager_GetDuration_Call struct {
	*mock.Call
}

// GetDuration is a helper method to define mock.On call
//   - key string
func (_e *MockManager_Expecter) GetDuration(key interface{}) *MockManager_GetDuration_Call {
	return &MockManager_GetDuration_Call{Call: _e.mock.On("GetDuration", key)}
}

func (_c *MockManager_GetDuration_Call) Run(run func(key string)) *MockManager_GetDuration_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockManager_GetDuration_Call) Return(_a0 time.Duration, _a1 bool) *MockManager_GetDuration_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockManager_GetDuration_Call) RunAndReturn(run func(string) (time.Duration, bool)) *MockManager_GetDuration_Call {
	_c.Call.Return(run)
	return _c
}

// GetFloat provides a mock function with given fields: key
func (_m *MockManager) GetFloat(key string) (float64, bool) {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for GetFloat")
	}

	var r0 float64
	var r1 bool
	if rf, ok := ret.Get(0).(func(string) (float64, bool)); ok {
		return rf(key)
	}
	if rf, ok := ret.Get(0).(func(string) float64); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(float64)
	}

	if rf, ok := ret.Get(1).(func(string) bool); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// MockManager_GetFloat_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFloat'
type MockManager_GetFloat_Call struct {
	*mock.Call
}

// GetFloat is a helper method to define mock.On call
//   - key string
func (_e *MockManager_Expecter) GetFloat(key interface{}) *MockManager_GetFloat_Call {
	return &MockManager_GetFloat_Call{Call: _e.mock.On("GetFloat", key)}
}

func (_c *MockManager_GetFloat_Call) Run(run func(key string)) *MockManager_GetFloat_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockManager_GetFloat_Call) Return(_a0 float64, _a1 bool) *MockManager_GetFloat_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockManager_GetFloat_Call) RunAndReturn(run func(string) (float64, bool)) *MockManager_GetFloat_Call {
	_c.Call.Return(run)
	return _c
}

// GetInt provides a mock function with given fields: key
func (_m *MockManager) GetInt(key string) (int, bool) {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for GetInt")
	}

	var r0 int
	var r1 bool
	if rf, ok := ret.Get(0).(func(string) (int, bool)); ok {
		return rf(key)
	}
	if rf, ok := ret.Get(0).(func(string) int); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(string) bool); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// MockManager_GetInt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetInt'
type MockManager_GetInt_Call struct {
	*mock.Call
}

// GetInt is a helper method to define mock.On call
//   - key string
func (_e *MockManager_Expecter) GetInt(key interface{}) *MockManager_GetInt_Call {
	return &MockManager_GetInt_Call{Call: _e.mock.On("GetInt", key)}
}

func (_c *MockManager_GetInt_Call) Run(run func(key string)) *MockManager_GetInt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockManager_GetInt_Call) Return(_a0 int, _a1 bool) *MockManager_GetInt_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockManager_GetInt_Call) RunAndReturn(run func(string) (int, bool)) *MockManager_GetInt_Call {
	_c.Call.Return(run)
	return _c
}

// GetIntSlice provides a mock function with given fields: key
func (_m *MockManager) GetIntSlice(key string) ([]int, bool) {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for GetIntSlice")
	}

	var r0 []int
	var r1 bool
	if rf, ok := ret.Get(0).(func(string) ([]int, bool)); ok {
		return rf(key)
	}
	if rf, ok := ret.Get(0).(func(string) []int); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]int)
		}
	}

	if rf, ok := ret.Get(1).(func(string) bool); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// MockManager_GetIntSlice_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetIntSlice'
type MockManager_GetIntSlice_Call struct {
	*mock.Call
}

// GetIntSlice is a helper method to define mock.On call
//   - key string
func (_e *MockManager_Expecter) GetIntSlice(key interface{}) *MockManager_GetIntSlice_Call {
	return &MockManager_GetIntSlice_Call{Call: _e.mock.On("GetIntSlice", key)}
}

func (_c *MockManager_GetIntSlice_Call) Run(run func(key string)) *MockManager_GetIntSlice_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockManager_GetIntSlice_Call) Return(_a0 []int, _a1 bool) *MockManager_GetIntSlice_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockManager_GetIntSlice_Call) RunAndReturn(run func(string) ([]int, bool)) *MockManager_GetIntSlice_Call {
	_c.Call.Return(run)
	return _c
}

// GetMap provides a mock function with given fields: key
func (_m *MockManager) GetMap(key string) (map[string]interface{}, bool) {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for GetMap")
	}

	var r0 map[string]interface{}
	var r1 bool
	if rf, ok := ret.Get(0).(func(string) (map[string]interface{}, bool)); ok {
		return rf(key)
	}
	if rf, ok := ret.Get(0).(func(string) map[string]interface{}); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(string) bool); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// MockManager_GetMap_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMap'
type MockManager_GetMap_Call struct {
	*mock.Call
}

// GetMap is a helper method to define mock.On call
//   - key string
func (_e *MockManager_Expecter) GetMap(key interface{}) *MockManager_GetMap_Call {
	return &MockManager_GetMap_Call{Call: _e.mock.On("GetMap", key)}
}

func (_c *MockManager_GetMap_Call) Run(run func(key string)) *MockManager_GetMap_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockManager_GetMap_Call) Return(_a0 map[string]interface{}, _a1 bool) *MockManager_GetMap_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockManager_GetMap_Call) RunAndReturn(run func(string) (map[string]interface{}, bool)) *MockManager_GetMap_Call {
	_c.Call.Return(run)
	return _c
}

// GetSlice provides a mock function with given fields: key
func (_m *MockManager) GetSlice(key string) ([]interface{}, bool) {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for GetSlice")
	}

	var r0 []interface{}
	var r1 bool
	if rf, ok := ret.Get(0).(func(string) ([]interface{}, bool)); ok {
		return rf(key)
	}
	if rf, ok := ret.Get(0).(func(string) []interface{}); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(string) bool); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// MockManager_GetSlice_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSlice'
type MockManager_GetSlice_Call struct {
	*mock.Call
}

// GetSlice is a helper method to define mock.On call
//   - key string
func (_e *MockManager_Expecter) GetSlice(key interface{}) *MockManager_GetSlice_Call {
	return &MockManager_GetSlice_Call{Call: _e.mock.On("GetSlice", key)}
}

func (_c *MockManager_GetSlice_Call) Run(run func(key string)) *MockManager_GetSlice_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockManager_GetSlice_Call) Return(_a0 []interface{}, _a1 bool) *MockManager_GetSlice_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockManager_GetSlice_Call) RunAndReturn(run func(string) ([]interface{}, bool)) *MockManager_GetSlice_Call {
	_c.Call.Return(run)
	return _c
}

// GetString provides a mock function with given fields: key
func (_m *MockManager) GetString(key string) (string, bool) {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for GetString")
	}

	var r0 string
	var r1 bool
	if rf, ok := ret.Get(0).(func(string) (string, bool)); ok {
		return rf(key)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) bool); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// MockManager_GetString_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetString'
type MockManager_GetString_Call struct {
	*mock.Call
}

// GetString is a helper method to define mock.On call
//   - key string
func (_e *MockManager_Expecter) GetString(key interface{}) *MockManager_GetString_Call {
	return &MockManager_GetString_Call{Call: _e.mock.On("GetString", key)}
}

func (_c *MockManager_GetString_Call) Run(run func(key string)) *MockManager_GetString_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockManager_GetString_Call) Return(_a0 string, _a1 bool) *MockManager_GetString_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockManager_GetString_Call) RunAndReturn(run func(string) (string, bool)) *MockManager_GetString_Call {
	_c.Call.Return(run)
	return _c
}

// GetStringMap provides a mock function with given fields: key
func (_m *MockManager) GetStringMap(key string) (map[string]interface{}, bool) {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for GetStringMap")
	}

	var r0 map[string]interface{}
	var r1 bool
	if rf, ok := ret.Get(0).(func(string) (map[string]interface{}, bool)); ok {
		return rf(key)
	}
	if rf, ok := ret.Get(0).(func(string) map[string]interface{}); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(string) bool); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// MockManager_GetStringMap_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStringMap'
type MockManager_GetStringMap_Call struct {
	*mock.Call
}

// GetStringMap is a helper method to define mock.On call
//   - key string
func (_e *MockManager_Expecter) GetStringMap(key interface{}) *MockManager_GetStringMap_Call {
	return &MockManager_GetStringMap_Call{Call: _e.mock.On("GetStringMap", key)}
}

func (_c *MockManager_GetStringMap_Call) Run(run func(key string)) *MockManager_GetStringMap_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockManager_GetStringMap_Call) Return(_a0 map[string]interface{}, _a1 bool) *MockManager_GetStringMap_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockManager_GetStringMap_Call) RunAndReturn(run func(string) (map[string]interface{}, bool)) *MockManager_GetStringMap_Call {
	_c.Call.Return(run)
	return _c
}

// GetStringMapString provides a mock function with given fields: key
func (_m *MockManager) GetStringMapString(key string) (map[string]string, bool) {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for GetStringMapString")
	}

	var r0 map[string]string
	var r1 bool
	if rf, ok := ret.Get(0).(func(string) (map[string]string, bool)); ok {
		return rf(key)
	}
	if rf, ok := ret.Get(0).(func(string) map[string]string); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	if rf, ok := ret.Get(1).(func(string) bool); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// MockManager_GetStringMapString_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStringMapString'
type MockManager_GetStringMapString_Call struct {
	*mock.Call
}

// GetStringMapString is a helper method to define mock.On call
//   - key string
func (_e *MockManager_Expecter) GetStringMapString(key interface{}) *MockManager_GetStringMapString_Call {
	return &MockManager_GetStringMapString_Call{Call: _e.mock.On("GetStringMapString", key)}
}

func (_c *MockManager_GetStringMapString_Call) Run(run func(key string)) *MockManager_GetStringMapString_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockManager_GetStringMapString_Call) Return(_a0 map[string]string, _a1 bool) *MockManager_GetStringMapString_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockManager_GetStringMapString_Call) RunAndReturn(run func(string) (map[string]string, bool)) *MockManager_GetStringMapString_Call {
	_c.Call.Return(run)
	return _c
}

// GetStringMapStringSlice provides a mock function with given fields: key
func (_m *MockManager) GetStringMapStringSlice(key string) (map[string][]string, bool) {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for GetStringMapStringSlice")
	}

	var r0 map[string][]string
	var r1 bool
	if rf, ok := ret.Get(0).(func(string) (map[string][]string, bool)); ok {
		return rf(key)
	}
	if rf, ok := ret.Get(0).(func(string) map[string][]string); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string][]string)
		}
	}

	if rf, ok := ret.Get(1).(func(string) bool); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// MockManager_GetStringMapStringSlice_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStringMapStringSlice'
type MockManager_GetStringMapStringSlice_Call struct {
	*mock.Call
}

// GetStringMapStringSlice is a helper method to define mock.On call
//   - key string
func (_e *MockManager_Expecter) GetStringMapStringSlice(key interface{}) *MockManager_GetStringMapStringSlice_Call {
	return &MockManager_GetStringMapStringSlice_Call{Call: _e.mock.On("GetStringMapStringSlice", key)}
}

func (_c *MockManager_GetStringMapStringSlice_Call) Run(run func(key string)) *MockManager_GetStringMapStringSlice_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockManager_GetStringMapStringSlice_Call) Return(_a0 map[string][]string, _a1 bool) *MockManager_GetStringMapStringSlice_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockManager_GetStringMapStringSlice_Call) RunAndReturn(run func(string) (map[string][]string, bool)) *MockManager_GetStringMapStringSlice_Call {
	_c.Call.Return(run)
	return _c
}

// GetStringSlice provides a mock function with given fields: key
func (_m *MockManager) GetStringSlice(key string) ([]string, bool) {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for GetStringSlice")
	}

	var r0 []string
	var r1 bool
	if rf, ok := ret.Get(0).(func(string) ([]string, bool)); ok {
		return rf(key)
	}
	if rf, ok := ret.Get(0).(func(string) []string); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(string) bool); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// MockManager_GetStringSlice_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStringSlice'
type MockManager_GetStringSlice_Call struct {
	*mock.Call
}

// GetStringSlice is a helper method to define mock.On call
//   - key string
func (_e *MockManager_Expecter) GetStringSlice(key interface{}) *MockManager_GetStringSlice_Call {
	return &MockManager_GetStringSlice_Call{Call: _e.mock.On("GetStringSlice", key)}
}

func (_c *MockManager_GetStringSlice_Call) Run(run func(key string)) *MockManager_GetStringSlice_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockManager_GetStringSlice_Call) Return(_a0 []string, _a1 bool) *MockManager_GetStringSlice_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockManager_GetStringSlice_Call) RunAndReturn(run func(string) ([]string, bool)) *MockManager_GetStringSlice_Call {
	_c.Call.Return(run)
	return _c
}

// GetTime provides a mock function with given fields: key
func (_m *MockManager) GetTime(key string) (time.Time, bool) {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for GetTime")
	}

	var r0 time.Time
	var r1 bool
	if rf, ok := ret.Get(0).(func(string) (time.Time, bool)); ok {
		return rf(key)
	}
	if rf, ok := ret.Get(0).(func(string) time.Time); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(time.Time)
	}

	if rf, ok := ret.Get(1).(func(string) bool); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// MockManager_GetTime_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTime'
type MockManager_GetTime_Call struct {
	*mock.Call
}

// GetTime is a helper method to define mock.On call
//   - key string
func (_e *MockManager_Expecter) GetTime(key interface{}) *MockManager_GetTime_Call {
	return &MockManager_GetTime_Call{Call: _e.mock.On("GetTime", key)}
}

func (_c *MockManager_GetTime_Call) Run(run func(key string)) *MockManager_GetTime_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockManager_GetTime_Call) Return(_a0 time.Time, _a1 bool) *MockManager_GetTime_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockManager_GetTime_Call) RunAndReturn(run func(string) (time.Time, bool)) *MockManager_GetTime_Call {
	_c.Call.Return(run)
	return _c
}

// Has provides a mock function with given fields: key
func (_m *MockManager) Has(key string) bool {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Has")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockManager_Has_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Has'
type MockManager_Has_Call struct {
	*mock.Call
}

// Has is a helper method to define mock.On call
//   - key string
func (_e *MockManager_Expecter) Has(key interface{}) *MockManager_Has_Call {
	return &MockManager_Has_Call{Call: _e.mock.On("Has", key)}
}

func (_c *MockManager_Has_Call) Run(run func(key string)) *MockManager_Has_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockManager_Has_Call) Return(_a0 bool) *MockManager_Has_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockManager_Has_Call) RunAndReturn(run func(string) bool) *MockManager_Has_Call {
	_c.Call.Return(run)
	return _c
}

// MergeConfig provides a mock function with given fields: in
func (_m *MockManager) MergeConfig(in io.Reader) error {
	ret := _m.Called(in)

	if len(ret) == 0 {
		panic("no return value specified for MergeConfig")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(io.Reader) error); ok {
		r0 = rf(in)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockManager_MergeConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MergeConfig'
type MockManager_MergeConfig_Call struct {
	*mock.Call
}

// MergeConfig is a helper method to define mock.On call
//   - in io.Reader
func (_e *MockManager_Expecter) MergeConfig(in interface{}) *MockManager_MergeConfig_Call {
	return &MockManager_MergeConfig_Call{Call: _e.mock.On("MergeConfig", in)}
}

func (_c *MockManager_MergeConfig_Call) Run(run func(in io.Reader)) *MockManager_MergeConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(io.Reader))
	})
	return _c
}

func (_c *MockManager_MergeConfig_Call) Return(_a0 error) *MockManager_MergeConfig_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockManager_MergeConfig_Call) RunAndReturn(run func(io.Reader) error) *MockManager_MergeConfig_Call {
	_c.Call.Return(run)
	return _c
}

// MergeInConfig provides a mock function with no fields
func (_m *MockManager) MergeInConfig() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for MergeInConfig")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockManager_MergeInConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MergeInConfig'
type MockManager_MergeInConfig_Call struct {
	*mock.Call
}

// MergeInConfig is a helper method to define mock.On call
func (_e *MockManager_Expecter) MergeInConfig() *MockManager_MergeInConfig_Call {
	return &MockManager_MergeInConfig_Call{Call: _e.mock.On("MergeInConfig")}
}

func (_c *MockManager_MergeInConfig_Call) Run(run func()) *MockManager_MergeInConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockManager_MergeInConfig_Call) Return(_a0 error) *MockManager_MergeInConfig_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockManager_MergeInConfig_Call) RunAndReturn(run func() error) *MockManager_MergeInConfig_Call {
	_c.Call.Return(run)
	return _c
}

// OnConfigChange provides a mock function with given fields: callback
func (_m *MockManager) OnConfigChange(callback func(fsnotify.Event)) {
	_m.Called(callback)
}

// MockManager_OnConfigChange_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnConfigChange'
type MockManager_OnConfigChange_Call struct {
	*mock.Call
}

// OnConfigChange is a helper method to define mock.On call
//   - callback func(fsnotify.Event)
func (_e *MockManager_Expecter) OnConfigChange(callback interface{}) *MockManager_OnConfigChange_Call {
	return &MockManager_OnConfigChange_Call{Call: _e.mock.On("OnConfigChange", callback)}
}

func (_c *MockManager_OnConfigChange_Call) Run(run func(callback func(fsnotify.Event))) *MockManager_OnConfigChange_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(fsnotify.Event)))
	})
	return _c
}

func (_c *MockManager_OnConfigChange_Call) Return() *MockManager_OnConfigChange_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockManager_OnConfigChange_Call) RunAndReturn(run func(func(fsnotify.Event))) *MockManager_OnConfigChange_Call {
	_c.Run(run)
	return _c
}

// ReadInConfig provides a mock function with no fields
func (_m *MockManager) ReadInConfig() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ReadInConfig")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockManager_ReadInConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadInConfig'
type MockManager_ReadInConfig_Call struct {
	*mock.Call
}

// ReadInConfig is a helper method to define mock.On call
func (_e *MockManager_Expecter) ReadInConfig() *MockManager_ReadInConfig_Call {
	return &MockManager_ReadInConfig_Call{Call: _e.mock.On("ReadInConfig")}
}

func (_c *MockManager_ReadInConfig_Call) Run(run func()) *MockManager_ReadInConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockManager_ReadInConfig_Call) Return(_a0 error) *MockManager_ReadInConfig_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockManager_ReadInConfig_Call) RunAndReturn(run func() error) *MockManager_ReadInConfig_Call {
	_c.Call.Return(run)
	return _c
}

// SafeWriteConfig provides a mock function with no fields
func (_m *MockManager) SafeWriteConfig() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for SafeWriteConfig")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockManager_SafeWriteConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SafeWriteConfig'
type MockManager_SafeWriteConfig_Call struct {
	*mock.Call
}

// SafeWriteConfig is a helper method to define mock.On call
func (_e *MockManager_Expecter) SafeWriteConfig() *MockManager_SafeWriteConfig_Call {
	return &MockManager_SafeWriteConfig_Call{Call: _e.mock.On("SafeWriteConfig")}
}

func (_c *MockManager_SafeWriteConfig_Call) Run(run func()) *MockManager_SafeWriteConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockManager_SafeWriteConfig_Call) Return(_a0 error) *MockManager_SafeWriteConfig_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockManager_SafeWriteConfig_Call) RunAndReturn(run func() error) *MockManager_SafeWriteConfig_Call {
	_c.Call.Return(run)
	return _c
}

// SafeWriteConfigAs provides a mock function with given fields: filename
func (_m *MockManager) SafeWriteConfigAs(filename string) error {
	ret := _m.Called(filename)

	if len(ret) == 0 {
		panic("no return value specified for SafeWriteConfigAs")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(filename)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockManager_SafeWriteConfigAs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SafeWriteConfigAs'
type MockManager_SafeWriteConfigAs_Call struct {
	*mock.Call
}

// SafeWriteConfigAs is a helper method to define mock.On call
//   - filename string
func (_e *MockManager_Expecter) SafeWriteConfigAs(filename interface{}) *MockManager_SafeWriteConfigAs_Call {
	return &MockManager_SafeWriteConfigAs_Call{Call: _e.mock.On("SafeWriteConfigAs", filename)}
}

func (_c *MockManager_SafeWriteConfigAs_Call) Run(run func(filename string)) *MockManager_SafeWriteConfigAs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockManager_SafeWriteConfigAs_Call) Return(_a0 error) *MockManager_SafeWriteConfigAs_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockManager_SafeWriteConfigAs_Call) RunAndReturn(run func(string) error) *MockManager_SafeWriteConfigAs_Call {
	_c.Call.Return(run)
	return _c
}

// Set provides a mock function with given fields: key, value
func (_m *MockManager) Set(key string, value interface{}) error {
	ret := _m.Called(key, value)

	if len(ret) == 0 {
		panic("no return value specified for Set")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, interface{}) error); ok {
		r0 = rf(key, value)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockManager_Set_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Set'
type MockManager_Set_Call struct {
	*mock.Call
}

// Set is a helper method to define mock.On call
//   - key string
//   - value interface{}
func (_e *MockManager_Expecter) Set(key interface{}, value interface{}) *MockManager_Set_Call {
	return &MockManager_Set_Call{Call: _e.mock.On("Set", key, value)}
}

func (_c *MockManager_Set_Call) Run(run func(key string, value interface{})) *MockManager_Set_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(interface{}))
	})
	return _c
}

func (_c *MockManager_Set_Call) Return(_a0 error) *MockManager_Set_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockManager_Set_Call) RunAndReturn(run func(string, interface{}) error) *MockManager_Set_Call {
	_c.Call.Return(run)
	return _c
}

// SetConfigFile provides a mock function with given fields: path
func (_m *MockManager) SetConfigFile(path string) {
	_m.Called(path)
}

// MockManager_SetConfigFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetConfigFile'
type MockManager_SetConfigFile_Call struct {
	*mock.Call
}

// SetConfigFile is a helper method to define mock.On call
//   - path string
func (_e *MockManager_Expecter) SetConfigFile(path interface{}) *MockManager_SetConfigFile_Call {
	return &MockManager_SetConfigFile_Call{Call: _e.mock.On("SetConfigFile", path)}
}

func (_c *MockManager_SetConfigFile_Call) Run(run func(path string)) *MockManager_SetConfigFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockManager_SetConfigFile_Call) Return() *MockManager_SetConfigFile_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockManager_SetConfigFile_Call) RunAndReturn(run func(string)) *MockManager_SetConfigFile_Call {
	_c.Run(run)
	return _c
}

// SetConfigName provides a mock function with given fields: name
func (_m *MockManager) SetConfigName(name string) {
	_m.Called(name)
}

// MockManager_SetConfigName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetConfigName'
type MockManager_SetConfigName_Call struct {
	*mock.Call
}

// SetConfigName is a helper method to define mock.On call
//   - name string
func (_e *MockManager_Expecter) SetConfigName(name interface{}) *MockManager_SetConfigName_Call {
	return &MockManager_SetConfigName_Call{Call: _e.mock.On("SetConfigName", name)}
}

func (_c *MockManager_SetConfigName_Call) Run(run func(name string)) *MockManager_SetConfigName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockManager_SetConfigName_Call) Return() *MockManager_SetConfigName_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockManager_SetConfigName_Call) RunAndReturn(run func(string)) *MockManager_SetConfigName_Call {
	_c.Run(run)
	return _c
}

// SetConfigType provides a mock function with given fields: configType
func (_m *MockManager) SetConfigType(configType string) {
	_m.Called(configType)
}

// MockManager_SetConfigType_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetConfigType'
type MockManager_SetConfigType_Call struct {
	*mock.Call
}

// SetConfigType is a helper method to define mock.On call
//   - configType string
func (_e *MockManager_Expecter) SetConfigType(configType interface{}) *MockManager_SetConfigType_Call {
	return &MockManager_SetConfigType_Call{Call: _e.mock.On("SetConfigType", configType)}
}

func (_c *MockManager_SetConfigType_Call) Run(run func(configType string)) *MockManager_SetConfigType_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockManager_SetConfigType_Call) Return() *MockManager_SetConfigType_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockManager_SetConfigType_Call) RunAndReturn(run func(string)) *MockManager_SetConfigType_Call {
	_c.Run(run)
	return _c
}

// SetDefault provides a mock function with given fields: key, value
func (_m *MockManager) SetDefault(key string, value interface{}) {
	_m.Called(key, value)
}

// MockManager_SetDefault_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetDefault'
type MockManager_SetDefault_Call struct {
	*mock.Call
}

// SetDefault is a helper method to define mock.On call
//   - key string
//   - value interface{}
func (_e *MockManager_Expecter) SetDefault(key interface{}, value interface{}) *MockManager_SetDefault_Call {
	return &MockManager_SetDefault_Call{Call: _e.mock.On("SetDefault", key, value)}
}

func (_c *MockManager_SetDefault_Call) Run(run func(key string, value interface{})) *MockManager_SetDefault_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(interface{}))
	})
	return _c
}

func (_c *MockManager_SetDefault_Call) Return() *MockManager_SetDefault_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockManager_SetDefault_Call) RunAndReturn(run func(string, interface{})) *MockManager_SetDefault_Call {
	_c.Run(run)
	return _c
}

// SetEnvPrefix provides a mock function with given fields: prefix
func (_m *MockManager) SetEnvPrefix(prefix string) {
	_m.Called(prefix)
}

// MockManager_SetEnvPrefix_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetEnvPrefix'
type MockManager_SetEnvPrefix_Call struct {
	*mock.Call
}

// SetEnvPrefix is a helper method to define mock.On call
//   - prefix string
func (_e *MockManager_Expecter) SetEnvPrefix(prefix interface{}) *MockManager_SetEnvPrefix_Call {
	return &MockManager_SetEnvPrefix_Call{Call: _e.mock.On("SetEnvPrefix", prefix)}
}

func (_c *MockManager_SetEnvPrefix_Call) Run(run func(prefix string)) *MockManager_SetEnvPrefix_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockManager_SetEnvPrefix_Call) Return() *MockManager_SetEnvPrefix_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockManager_SetEnvPrefix_Call) RunAndReturn(run func(string)) *MockManager_SetEnvPrefix_Call {
	_c.Run(run)
	return _c
}

// Unmarshal provides a mock function with given fields: target
func (_m *MockManager) Unmarshal(target interface{}) error {
	ret := _m.Called(target)

	if len(ret) == 0 {
		panic("no return value specified for Unmarshal")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}) error); ok {
		r0 = rf(target)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockManager_Unmarshal_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Unmarshal'
type MockManager_Unmarshal_Call struct {
	*mock.Call
}

// Unmarshal is a helper method to define mock.On call
//   - target interface{}
func (_e *MockManager_Expecter) Unmarshal(target interface{}) *MockManager_Unmarshal_Call {
	return &MockManager_Unmarshal_Call{Call: _e.mock.On("Unmarshal", target)}
}

func (_c *MockManager_Unmarshal_Call) Run(run func(target interface{})) *MockManager_Unmarshal_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}))
	})
	return _c
}

func (_c *MockManager_Unmarshal_Call) Return(_a0 error) *MockManager_Unmarshal_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockManager_Unmarshal_Call) RunAndReturn(run func(interface{}) error) *MockManager_Unmarshal_Call {
	_c.Call.Return(run)
	return _c
}

// UnmarshalKey provides a mock function with given fields: key, target
func (_m *MockManager) UnmarshalKey(key string, target interface{}) error {
	ret := _m.Called(key, target)

	if len(ret) == 0 {
		panic("no return value specified for UnmarshalKey")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, interface{}) error); ok {
		r0 = rf(key, target)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockManager_UnmarshalKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnmarshalKey'
type MockManager_UnmarshalKey_Call struct {
	*mock.Call
}

// UnmarshalKey is a helper method to define mock.On call
//   - key string
//   - target interface{}
func (_e *MockManager_Expecter) UnmarshalKey(key interface{}, target interface{}) *MockManager_UnmarshalKey_Call {
	return &MockManager_UnmarshalKey_Call{Call: _e.mock.On("UnmarshalKey", key, target)}
}

func (_c *MockManager_UnmarshalKey_Call) Run(run func(key string, target interface{})) *MockManager_UnmarshalKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(interface{}))
	})
	return _c
}

func (_c *MockManager_UnmarshalKey_Call) Return(_a0 error) *MockManager_UnmarshalKey_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockManager_UnmarshalKey_Call) RunAndReturn(run func(string, interface{}) error) *MockManager_UnmarshalKey_Call {
	_c.Call.Return(run)
	return _c
}

// WatchConfig provides a mock function with no fields
func (_m *MockManager) WatchConfig() {
	_m.Called()
}

// MockManager_WatchConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WatchConfig'
type MockManager_WatchConfig_Call struct {
	*mock.Call
}

// WatchConfig is a helper method to define mock.On call
func (_e *MockManager_Expecter) WatchConfig() *MockManager_WatchConfig_Call {
	return &MockManager_WatchConfig_Call{Call: _e.mock.On("WatchConfig")}
}

func (_c *MockManager_WatchConfig_Call) Run(run func()) *MockManager_WatchConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockManager_WatchConfig_Call) Return() *MockManager_WatchConfig_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockManager_WatchConfig_Call) RunAndReturn(run func()) *MockManager_WatchConfig_Call {
	_c.Run(run)
	return _c
}

// WriteConfig provides a mock function with no fields
func (_m *MockManager) WriteConfig() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for WriteConfig")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockManager_WriteConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WriteConfig'
type MockManager_WriteConfig_Call struct {
	*mock.Call
}

// WriteConfig is a helper method to define mock.On call
func (_e *MockManager_Expecter) WriteConfig() *MockManager_WriteConfig_Call {
	return &MockManager_WriteConfig_Call{Call: _e.mock.On("WriteConfig")}
}

func (_c *MockManager_WriteConfig_Call) Run(run func()) *MockManager_WriteConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockManager_WriteConfig_Call) Return(_a0 error) *MockManager_WriteConfig_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockManager_WriteConfig_Call) RunAndReturn(run func() error) *MockManager_WriteConfig_Call {
	_c.Call.Return(run)
	return _c
}

// WriteConfigAs provides a mock function with given fields: filename
func (_m *MockManager) WriteConfigAs(filename string) error {
	ret := _m.Called(filename)

	if len(ret) == 0 {
		panic("no return value specified for WriteConfigAs")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(filename)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockManager_WriteConfigAs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WriteConfigAs'
type MockManager_WriteConfigAs_Call struct {
	*mock.Call
}

// WriteConfigAs is a helper method to define mock.On call
//   - filename string
func (_e *MockManager_Expecter) WriteConfigAs(filename interface{}) *MockManager_WriteConfigAs_Call {
	return &MockManager_WriteConfigAs_Call{Call: _e.mock.On("WriteConfigAs", filename)}
}

func (_c *MockManager_WriteConfigAs_Call) Run(run func(filename string)) *MockManager_WriteConfigAs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockManager_WriteConfigAs_Call) Return(_a0 error) *MockManager_WriteConfigAs_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockManager_WriteConfigAs_Call) RunAndReturn(run func(string) error) *MockManager_WriteConfigAs_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockManager creates a new instance of MockManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockManager {
	mock := &MockManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
