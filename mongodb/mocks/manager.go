// Code generated by mockery v2.53.4. DO NOT EDIT.
package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	mongo "go.mongodb.org/mongo-driver/mongo"

	mongodb "go.fork.vn/providers/mongodb"

	options "go.mongodb.org/mongo-driver/mongo/options"
)

// MockManager is an autogenerated mock type for the Manager type
type MockManager struct {
	mock.Mock
}

type MockManager_Expecter struct {
	mock *mock.Mock
}

func (_m *MockManager) EXPECT() *MockManager_Expecter {
	return &MockManager_Expecter{mock: &_m.Mock}
}

// Client provides a mock function with no fields
func (_m *MockManager) Client() *mongo.Client {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Client")
	}

	var r0 *mongo.Client
	if rf, ok := ret.Get(0).(func() *mongo.Client); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mongo.Client)
		}
	}

	return r0
}

// MockManager_Client_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Client'
type MockManager_Client_Call struct {
	*mock.Call
}

// Client is a helper method to define mock.On call
func (_e *MockManager_Expecter) Client() *MockManager_Client_Call {
	return &MockManager_Client_Call{Call: _e.mock.On("Client")}
}

func (_c *MockManager_Client_Call) Run(run func()) *MockManager_Client_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockManager_Client_Call) Return(_a0 *mongo.Client) *MockManager_Client_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockManager_Client_Call) RunAndReturn(run func() *mongo.Client) *MockManager_Client_Call {
	_c.Call.Return(run)
	return _c
}

// Collection provides a mock function with given fields: name
func (_m *MockManager) Collection(name string) *mongo.Collection {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for Collection")
	}

	var r0 *mongo.Collection
	if rf, ok := ret.Get(0).(func(string) *mongo.Collection); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mongo.Collection)
		}
	}

	return r0
}

// MockManager_Collection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Collection'
type MockManager_Collection_Call struct {
	*mock.Call
}

// Collection is a helper method to define mock.On call
//   - name string
func (_e *MockManager_Expecter) Collection(name interface{}) *MockManager_Collection_Call {
	return &MockManager_Collection_Call{Call: _e.mock.On("Collection", name)}
}

func (_c *MockManager_Collection_Call) Run(run func(name string)) *MockManager_Collection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockManager_Collection_Call) Return(_a0 *mongo.Collection) *MockManager_Collection_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockManager_Collection_Call) RunAndReturn(run func(string) *mongo.Collection) *MockManager_Collection_Call {
	_c.Call.Return(run)
	return _c
}

// CollectionWithDatabase provides a mock function with given fields: dbName, collectionName
func (_m *MockManager) CollectionWithDatabase(dbName string, collectionName string) *mongo.Collection {
	ret := _m.Called(dbName, collectionName)

	if len(ret) == 0 {
		panic("no return value specified for CollectionWithDatabase")
	}

	var r0 *mongo.Collection
	if rf, ok := ret.Get(0).(func(string, string) *mongo.Collection); ok {
		r0 = rf(dbName, collectionName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mongo.Collection)
		}
	}

	return r0
}

// MockManager_CollectionWithDatabase_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CollectionWithDatabase'
type MockManager_CollectionWithDatabase_Call struct {
	*mock.Call
}

// CollectionWithDatabase is a helper method to define mock.On call
//   - dbName string
//   - collectionName string
func (_e *MockManager_Expecter) CollectionWithDatabase(dbName interface{}, collectionName interface{}) *MockManager_CollectionWithDatabase_Call {
	return &MockManager_CollectionWithDatabase_Call{Call: _e.mock.On("CollectionWithDatabase", dbName, collectionName)}
}

func (_c *MockManager_CollectionWithDatabase_Call) Run(run func(dbName string, collectionName string)) *MockManager_CollectionWithDatabase_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockManager_CollectionWithDatabase_Call) Return(_a0 *mongo.Collection) *MockManager_CollectionWithDatabase_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockManager_CollectionWithDatabase_Call) RunAndReturn(run func(string, string) *mongo.Collection) *MockManager_CollectionWithDatabase_Call {
	_c.Call.Return(run)
	return _c
}

// Config provides a mock function with no fields
func (_m *MockManager) Config() *mongodb.Config {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Config")
	}

	var r0 *mongodb.Config
	if rf, ok := ret.Get(0).(func() *mongodb.Config); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mongodb.Config)
		}
	}

	return r0
}

// MockManager_Config_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Config'
type MockManager_Config_Call struct {
	*mock.Call
}

// Config is a helper method to define mock.On call
func (_e *MockManager_Expecter) Config() *MockManager_Config_Call {
	return &MockManager_Config_Call{Call: _e.mock.On("Config")}
}

func (_c *MockManager_Config_Call) Run(run func()) *MockManager_Config_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockManager_Config_Call) Return(_a0 *mongodb.Config) *MockManager_Config_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockManager_Config_Call) RunAndReturn(run func() *mongodb.Config) *MockManager_Config_Call {
	_c.Call.Return(run)
	return _c
}

// CreateIndex provides a mock function with given fields: ctx, collectionName, model, opts
func (_m *MockManager) CreateIndex(ctx context.Context, collectionName string, model mongo.IndexModel, opts ...*options.CreateIndexesOptions) (string, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, collectionName, model)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateIndex")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, mongo.IndexModel, ...*options.CreateIndexesOptions) (string, error)); ok {
		return rf(ctx, collectionName, model, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, mongo.IndexModel, ...*options.CreateIndexesOptions) string); ok {
		r0 = rf(ctx, collectionName, model, opts...)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, mongo.IndexModel, ...*options.CreateIndexesOptions) error); ok {
		r1 = rf(ctx, collectionName, model, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockManager_CreateIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateIndex'
type MockManager_CreateIndex_Call struct {
	*mock.Call
}

// CreateIndex is a helper method to define mock.On call
//   - ctx context.Context
//   - collectionName string
//   - model mongo.IndexModel
//   - opts ...*options.CreateIndexesOptions
func (_e *MockManager_Expecter) CreateIndex(ctx interface{}, collectionName interface{}, model interface{}, opts ...interface{}) *MockManager_CreateIndex_Call {
	return &MockManager_CreateIndex_Call{Call: _e.mock.On("CreateIndex",
		append([]interface{}{ctx, collectionName, model}, opts...)...)}
}

func (_c *MockManager_CreateIndex_Call) Run(run func(ctx context.Context, collectionName string, model mongo.IndexModel, opts ...*options.CreateIndexesOptions)) *MockManager_CreateIndex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]*options.CreateIndexesOptions, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(*options.CreateIndexesOptions)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(mongo.IndexModel), variadicArgs...)
	})
	return _c
}

func (_c *MockManager_CreateIndex_Call) Return(_a0 string, _a1 error) *MockManager_CreateIndex_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockManager_CreateIndex_Call) RunAndReturn(run func(context.Context, string, mongo.IndexModel, ...*options.CreateIndexesOptions) (string, error)) *MockManager_CreateIndex_Call {
	_c.Call.Return(run)
	return _c
}

// CreateIndexWithDatabase provides a mock function with given fields: ctx, dbName, collectionName, model, opts
func (_m *MockManager) CreateIndexWithDatabase(ctx context.Context, dbName string, collectionName string, model mongo.IndexModel, opts ...*options.CreateIndexesOptions) (string, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, dbName, collectionName, model)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateIndexWithDatabase")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, mongo.IndexModel, ...*options.CreateIndexesOptions) (string, error)); ok {
		return rf(ctx, dbName, collectionName, model, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, mongo.IndexModel, ...*options.CreateIndexesOptions) string); ok {
		r0 = rf(ctx, dbName, collectionName, model, opts...)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, mongo.IndexModel, ...*options.CreateIndexesOptions) error); ok {
		r1 = rf(ctx, dbName, collectionName, model, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockManager_CreateIndexWithDatabase_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateIndexWithDatabase'
type MockManager_CreateIndexWithDatabase_Call struct {
	*mock.Call
}

// CreateIndexWithDatabase is a helper method to define mock.On call
//   - ctx context.Context
//   - dbName string
//   - collectionName string
//   - model mongo.IndexModel
//   - opts ...*options.CreateIndexesOptions
func (_e *MockManager_Expecter) CreateIndexWithDatabase(ctx interface{}, dbName interface{}, collectionName interface{}, model interface{}, opts ...interface{}) *MockManager_CreateIndexWithDatabase_Call {
	return &MockManager_CreateIndexWithDatabase_Call{Call: _e.mock.On("CreateIndexWithDatabase",
		append([]interface{}{ctx, dbName, collectionName, model}, opts...)...)}
}

func (_c *MockManager_CreateIndexWithDatabase_Call) Run(run func(ctx context.Context, dbName string, collectionName string, model mongo.IndexModel, opts ...*options.CreateIndexesOptions)) *MockManager_CreateIndexWithDatabase_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]*options.CreateIndexesOptions, len(args)-4)
		for i, a := range args[4:] {
			if a != nil {
				variadicArgs[i] = a.(*options.CreateIndexesOptions)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(mongo.IndexModel), variadicArgs...)
	})
	return _c
}

func (_c *MockManager_CreateIndexWithDatabase_Call) Return(_a0 string, _a1 error) *MockManager_CreateIndexWithDatabase_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockManager_CreateIndexWithDatabase_Call) RunAndReturn(run func(context.Context, string, string, mongo.IndexModel, ...*options.CreateIndexesOptions) (string, error)) *MockManager_CreateIndexWithDatabase_Call {
	_c.Call.Return(run)
	return _c
}

// CreateIndexes provides a mock function with given fields: ctx, collectionName, models, opts
func (_m *MockManager) CreateIndexes(ctx context.Context, collectionName string, models []mongo.IndexModel, opts ...*options.CreateIndexesOptions) ([]string, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, collectionName, models)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateIndexes")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []mongo.IndexModel, ...*options.CreateIndexesOptions) ([]string, error)); ok {
		return rf(ctx, collectionName, models, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, []mongo.IndexModel, ...*options.CreateIndexesOptions) []string); ok {
		r0 = rf(ctx, collectionName, models, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, []mongo.IndexModel, ...*options.CreateIndexesOptions) error); ok {
		r1 = rf(ctx, collectionName, models, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockManager_CreateIndexes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateIndexes'
type MockManager_CreateIndexes_Call struct {
	*mock.Call
}

// CreateIndexes is a helper method to define mock.On call
//   - ctx context.Context
//   - collectionName string
//   - models []mongo.IndexModel
//   - opts ...*options.CreateIndexesOptions
func (_e *MockManager_Expecter) CreateIndexes(ctx interface{}, collectionName interface{}, models interface{}, opts ...interface{}) *MockManager_CreateIndexes_Call {
	return &MockManager_CreateIndexes_Call{Call: _e.mock.On("CreateIndexes",
		append([]interface{}{ctx, collectionName, models}, opts...)...)}
}

func (_c *MockManager_CreateIndexes_Call) Run(run func(ctx context.Context, collectionName string, models []mongo.IndexModel, opts ...*options.CreateIndexesOptions)) *MockManager_CreateIndexes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]*options.CreateIndexesOptions, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(*options.CreateIndexesOptions)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].([]mongo.IndexModel), variadicArgs...)
	})
	return _c
}

func (_c *MockManager_CreateIndexes_Call) Return(_a0 []string, _a1 error) *MockManager_CreateIndexes_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockManager_CreateIndexes_Call) RunAndReturn(run func(context.Context, string, []mongo.IndexModel, ...*options.CreateIndexesOptions) ([]string, error)) *MockManager_CreateIndexes_Call {
	_c.Call.Return(run)
	return _c
}

// CreateIndexesWithDatabase provides a mock function with given fields: ctx, dbName, collectionName, models, opts
func (_m *MockManager) CreateIndexesWithDatabase(ctx context.Context, dbName string, collectionName string, models []mongo.IndexModel, opts ...*options.CreateIndexesOptions) ([]string, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, dbName, collectionName, models)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateIndexesWithDatabase")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, []mongo.IndexModel, ...*options.CreateIndexesOptions) ([]string, error)); ok {
		return rf(ctx, dbName, collectionName, models, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, []mongo.IndexModel, ...*options.CreateIndexesOptions) []string); ok {
		r0 = rf(ctx, dbName, collectionName, models, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, []mongo.IndexModel, ...*options.CreateIndexesOptions) error); ok {
		r1 = rf(ctx, dbName, collectionName, models, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockManager_CreateIndexesWithDatabase_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateIndexesWithDatabase'
type MockManager_CreateIndexesWithDatabase_Call struct {
	*mock.Call
}

// CreateIndexesWithDatabase is a helper method to define mock.On call
//   - ctx context.Context
//   - dbName string
//   - collectionName string
//   - models []mongo.IndexModel
//   - opts ...*options.CreateIndexesOptions
func (_e *MockManager_Expecter) CreateIndexesWithDatabase(ctx interface{}, dbName interface{}, collectionName interface{}, models interface{}, opts ...interface{}) *MockManager_CreateIndexesWithDatabase_Call {
	return &MockManager_CreateIndexesWithDatabase_Call{Call: _e.mock.On("CreateIndexesWithDatabase",
		append([]interface{}{ctx, dbName, collectionName, models}, opts...)...)}
}

func (_c *MockManager_CreateIndexesWithDatabase_Call) Run(run func(ctx context.Context, dbName string, collectionName string, models []mongo.IndexModel, opts ...*options.CreateIndexesOptions)) *MockManager_CreateIndexesWithDatabase_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]*options.CreateIndexesOptions, len(args)-4)
		for i, a := range args[4:] {
			if a != nil {
				variadicArgs[i] = a.(*options.CreateIndexesOptions)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].([]mongo.IndexModel), variadicArgs...)
	})
	return _c
}

func (_c *MockManager_CreateIndexesWithDatabase_Call) Return(_a0 []string, _a1 error) *MockManager_CreateIndexesWithDatabase_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockManager_CreateIndexesWithDatabase_Call) RunAndReturn(run func(context.Context, string, string, []mongo.IndexModel, ...*options.CreateIndexesOptions) ([]string, error)) *MockManager_CreateIndexesWithDatabase_Call {
	_c.Call.Return(run)
	return _c
}

// Database provides a mock function with no fields
func (_m *MockManager) Database() *mongo.Database {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Database")
	}

	var r0 *mongo.Database
	if rf, ok := ret.Get(0).(func() *mongo.Database); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mongo.Database)
		}
	}

	return r0
}

// MockManager_Database_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Database'
type MockManager_Database_Call struct {
	*mock.Call
}

// Database is a helper method to define mock.On call
func (_e *MockManager_Expecter) Database() *MockManager_Database_Call {
	return &MockManager_Database_Call{Call: _e.mock.On("Database")}
}

func (_c *MockManager_Database_Call) Run(run func()) *MockManager_Database_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockManager_Database_Call) Return(_a0 *mongo.Database) *MockManager_Database_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockManager_Database_Call) RunAndReturn(run func() *mongo.Database) *MockManager_Database_Call {
	_c.Call.Return(run)
	return _c
}

// DatabaseWithName provides a mock function with given fields: name
func (_m *MockManager) DatabaseWithName(name string) *mongo.Database {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for DatabaseWithName")
	}

	var r0 *mongo.Database
	if rf, ok := ret.Get(0).(func(string) *mongo.Database); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mongo.Database)
		}
	}

	return r0
}

// MockManager_DatabaseWithName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DatabaseWithName'
type MockManager_DatabaseWithName_Call struct {
	*mock.Call
}

// DatabaseWithName is a helper method to define mock.On call
//   - name string
func (_e *MockManager_Expecter) DatabaseWithName(name interface{}) *MockManager_DatabaseWithName_Call {
	return &MockManager_DatabaseWithName_Call{Call: _e.mock.On("DatabaseWithName", name)}
}

func (_c *MockManager_DatabaseWithName_Call) Run(run func(name string)) *MockManager_DatabaseWithName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockManager_DatabaseWithName_Call) Return(_a0 *mongo.Database) *MockManager_DatabaseWithName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockManager_DatabaseWithName_Call) RunAndReturn(run func(string) *mongo.Database) *MockManager_DatabaseWithName_Call {
	_c.Call.Return(run)
	return _c
}

// Disconnect provides a mock function with given fields: ctx
func (_m *MockManager) Disconnect(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Disconnect")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockManager_Disconnect_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Disconnect'
type MockManager_Disconnect_Call struct {
	*mock.Call
}

// Disconnect is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockManager_Expecter) Disconnect(ctx interface{}) *MockManager_Disconnect_Call {
	return &MockManager_Disconnect_Call{Call: _e.mock.On("Disconnect", ctx)}
}

func (_c *MockManager_Disconnect_Call) Run(run func(ctx context.Context)) *MockManager_Disconnect_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockManager_Disconnect_Call) Return(_a0 error) *MockManager_Disconnect_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockManager_Disconnect_Call) RunAndReturn(run func(context.Context) error) *MockManager_Disconnect_Call {
	_c.Call.Return(run)
	return _c
}

// DropAllIndexes provides a mock function with given fields: ctx, collectionName
func (_m *MockManager) DropAllIndexes(ctx context.Context, collectionName string) (interface{}, error) {
	ret := _m.Called(ctx, collectionName)

	if len(ret) == 0 {
		panic("no return value specified for DropAllIndexes")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (interface{}, error)); ok {
		return rf(ctx, collectionName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) interface{}); ok {
		r0 = rf(ctx, collectionName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, collectionName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockManager_DropAllIndexes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DropAllIndexes'
type MockManager_DropAllIndexes_Call struct {
	*mock.Call
}

// DropAllIndexes is a helper method to define mock.On call
//   - ctx context.Context
//   - collectionName string
func (_e *MockManager_Expecter) DropAllIndexes(ctx interface{}, collectionName interface{}) *MockManager_DropAllIndexes_Call {
	return &MockManager_DropAllIndexes_Call{Call: _e.mock.On("DropAllIndexes", ctx, collectionName)}
}

func (_c *MockManager_DropAllIndexes_Call) Run(run func(ctx context.Context, collectionName string)) *MockManager_DropAllIndexes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockManager_DropAllIndexes_Call) Return(_a0 interface{}, _a1 error) *MockManager_DropAllIndexes_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockManager_DropAllIndexes_Call) RunAndReturn(run func(context.Context, string) (interface{}, error)) *MockManager_DropAllIndexes_Call {
	_c.Call.Return(run)
	return _c
}

// DropAllIndexesWithDatabase provides a mock function with given fields: ctx, dbName, collectionName
func (_m *MockManager) DropAllIndexesWithDatabase(ctx context.Context, dbName string, collectionName string) (interface{}, error) {
	ret := _m.Called(ctx, dbName, collectionName)

	if len(ret) == 0 {
		panic("no return value specified for DropAllIndexesWithDatabase")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (interface{}, error)); ok {
		return rf(ctx, dbName, collectionName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) interface{}); ok {
		r0 = rf(ctx, dbName, collectionName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, dbName, collectionName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockManager_DropAllIndexesWithDatabase_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DropAllIndexesWithDatabase'
type MockManager_DropAllIndexesWithDatabase_Call struct {
	*mock.Call
}

// DropAllIndexesWithDatabase is a helper method to define mock.On call
//   - ctx context.Context
//   - dbName string
//   - collectionName string
func (_e *MockManager_Expecter) DropAllIndexesWithDatabase(ctx interface{}, dbName interface{}, collectionName interface{}) *MockManager_DropAllIndexesWithDatabase_Call {
	return &MockManager_DropAllIndexesWithDatabase_Call{Call: _e.mock.On("DropAllIndexesWithDatabase", ctx, dbName, collectionName)}
}

func (_c *MockManager_DropAllIndexesWithDatabase_Call) Run(run func(ctx context.Context, dbName string, collectionName string)) *MockManager_DropAllIndexesWithDatabase_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockManager_DropAllIndexesWithDatabase_Call) Return(_a0 interface{}, _a1 error) *MockManager_DropAllIndexesWithDatabase_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockManager_DropAllIndexesWithDatabase_Call) RunAndReturn(run func(context.Context, string, string) (interface{}, error)) *MockManager_DropAllIndexesWithDatabase_Call {
	_c.Call.Return(run)
	return _c
}

// DropDatabase provides a mock function with given fields: ctx
func (_m *MockManager) DropDatabase(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for DropDatabase")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockManager_DropDatabase_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DropDatabase'
type MockManager_DropDatabase_Call struct {
	*mock.Call
}

// DropDatabase is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockManager_Expecter) DropDatabase(ctx interface{}) *MockManager_DropDatabase_Call {
	return &MockManager_DropDatabase_Call{Call: _e.mock.On("DropDatabase", ctx)}
}

func (_c *MockManager_DropDatabase_Call) Run(run func(ctx context.Context)) *MockManager_DropDatabase_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockManager_DropDatabase_Call) Return(_a0 error) *MockManager_DropDatabase_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockManager_DropDatabase_Call) RunAndReturn(run func(context.Context) error) *MockManager_DropDatabase_Call {
	_c.Call.Return(run)
	return _c
}

// DropDatabaseWithName provides a mock function with given fields: ctx, name
func (_m *MockManager) DropDatabaseWithName(ctx context.Context, name string) error {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for DropDatabaseWithName")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockManager_DropDatabaseWithName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DropDatabaseWithName'
type MockManager_DropDatabaseWithName_Call struct {
	*mock.Call
}

// DropDatabaseWithName is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockManager_Expecter) DropDatabaseWithName(ctx interface{}, name interface{}) *MockManager_DropDatabaseWithName_Call {
	return &MockManager_DropDatabaseWithName_Call{Call: _e.mock.On("DropDatabaseWithName", ctx, name)}
}

func (_c *MockManager_DropDatabaseWithName_Call) Run(run func(ctx context.Context, name string)) *MockManager_DropDatabaseWithName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockManager_DropDatabaseWithName_Call) Return(_a0 error) *MockManager_DropDatabaseWithName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockManager_DropDatabaseWithName_Call) RunAndReturn(run func(context.Context, string) error) *MockManager_DropDatabaseWithName_Call {
	_c.Call.Return(run)
	return _c
}

// DropIndex provides a mock function with given fields: ctx, collectionName, name
func (_m *MockManager) DropIndex(ctx context.Context, collectionName string, name string) (interface{}, error) {
	ret := _m.Called(ctx, collectionName, name)

	if len(ret) == 0 {
		panic("no return value specified for DropIndex")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (interface{}, error)); ok {
		return rf(ctx, collectionName, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) interface{}); ok {
		r0 = rf(ctx, collectionName, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, collectionName, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockManager_DropIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DropIndex'
type MockManager_DropIndex_Call struct {
	*mock.Call
}

// DropIndex is a helper method to define mock.On call
//   - ctx context.Context
//   - collectionName string
//   - name string
func (_e *MockManager_Expecter) DropIndex(ctx interface{}, collectionName interface{}, name interface{}) *MockManager_DropIndex_Call {
	return &MockManager_DropIndex_Call{Call: _e.mock.On("DropIndex", ctx, collectionName, name)}
}

func (_c *MockManager_DropIndex_Call) Run(run func(ctx context.Context, collectionName string, name string)) *MockManager_DropIndex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockManager_DropIndex_Call) Return(_a0 interface{}, _a1 error) *MockManager_DropIndex_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockManager_DropIndex_Call) RunAndReturn(run func(context.Context, string, string) (interface{}, error)) *MockManager_DropIndex_Call {
	_c.Call.Return(run)
	return _c
}

// DropIndexWithDatabase provides a mock function with given fields: ctx, dbName, collectionName, name
func (_m *MockManager) DropIndexWithDatabase(ctx context.Context, dbName string, collectionName string, name string) (interface{}, error) {
	ret := _m.Called(ctx, dbName, collectionName, name)

	if len(ret) == 0 {
		panic("no return value specified for DropIndexWithDatabase")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) (interface{}, error)); ok {
		return rf(ctx, dbName, collectionName, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) interface{}); ok {
		r0 = rf(ctx, dbName, collectionName, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, dbName, collectionName, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockManager_DropIndexWithDatabase_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DropIndexWithDatabase'
type MockManager_DropIndexWithDatabase_Call struct {
	*mock.Call
}

// DropIndexWithDatabase is a helper method to define mock.On call
//   - ctx context.Context
//   - dbName string
//   - collectionName string
//   - name string
func (_e *MockManager_Expecter) DropIndexWithDatabase(ctx interface{}, dbName interface{}, collectionName interface{}, name interface{}) *MockManager_DropIndexWithDatabase_Call {
	return &MockManager_DropIndexWithDatabase_Call{Call: _e.mock.On("DropIndexWithDatabase", ctx, dbName, collectionName, name)}
}

func (_c *MockManager_DropIndexWithDatabase_Call) Run(run func(ctx context.Context, dbName string, collectionName string, name string)) *MockManager_DropIndexWithDatabase_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockManager_DropIndexWithDatabase_Call) Return(_a0 interface{}, _a1 error) *MockManager_DropIndexWithDatabase_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockManager_DropIndexWithDatabase_Call) RunAndReturn(run func(context.Context, string, string, string) (interface{}, error)) *MockManager_DropIndexWithDatabase_Call {
	_c.Call.Return(run)
	return _c
}

// HealthCheck provides a mock function with given fields: ctx
func (_m *MockManager) HealthCheck(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for HealthCheck")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockManager_HealthCheck_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HealthCheck'
type MockManager_HealthCheck_Call struct {
	*mock.Call
}

// HealthCheck is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockManager_Expecter) HealthCheck(ctx interface{}) *MockManager_HealthCheck_Call {
	return &MockManager_HealthCheck_Call{Call: _e.mock.On("HealthCheck", ctx)}
}

func (_c *MockManager_HealthCheck_Call) Run(run func(ctx context.Context)) *MockManager_HealthCheck_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockManager_HealthCheck_Call) Return(_a0 error) *MockManager_HealthCheck_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockManager_HealthCheck_Call) RunAndReturn(run func(context.Context) error) *MockManager_HealthCheck_Call {
	_c.Call.Return(run)
	return _c
}

// ListCollections provides a mock function with given fields: ctx
func (_m *MockManager) ListCollections(ctx context.Context) ([]string, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListCollections")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]string, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []string); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockManager_ListCollections_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListCollections'
type MockManager_ListCollections_Call struct {
	*mock.Call
}

// ListCollections is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockManager_Expecter) ListCollections(ctx interface{}) *MockManager_ListCollections_Call {
	return &MockManager_ListCollections_Call{Call: _e.mock.On("ListCollections", ctx)}
}

func (_c *MockManager_ListCollections_Call) Run(run func(ctx context.Context)) *MockManager_ListCollections_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockManager_ListCollections_Call) Return(_a0 []string, _a1 error) *MockManager_ListCollections_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockManager_ListCollections_Call) RunAndReturn(run func(context.Context) ([]string, error)) *MockManager_ListCollections_Call {
	_c.Call.Return(run)
	return _c
}

// ListDatabases provides a mock function with given fields: ctx
func (_m *MockManager) ListDatabases(ctx context.Context) ([]string, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListDatabases")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]string, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []string); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockManager_ListDatabases_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListDatabases'
type MockManager_ListDatabases_Call struct {
	*mock.Call
}

// ListDatabases is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockManager_Expecter) ListDatabases(ctx interface{}) *MockManager_ListDatabases_Call {
	return &MockManager_ListDatabases_Call{Call: _e.mock.On("ListDatabases", ctx)}
}

func (_c *MockManager_ListDatabases_Call) Run(run func(ctx context.Context)) *MockManager_ListDatabases_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockManager_ListDatabases_Call) Return(_a0 []string, _a1 error) *MockManager_ListDatabases_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockManager_ListDatabases_Call) RunAndReturn(run func(context.Context) ([]string, error)) *MockManager_ListDatabases_Call {
	_c.Call.Return(run)
	return _c
}

// ListIndexes provides a mock function with given fields: ctx, collectionName, opts
func (_m *MockManager) ListIndexes(ctx context.Context, collectionName string, opts ...*options.ListIndexesOptions) (*mongo.Cursor, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, collectionName)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListIndexes")
	}

	var r0 *mongo.Cursor
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, ...*options.ListIndexesOptions) (*mongo.Cursor, error)); ok {
		return rf(ctx, collectionName, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, ...*options.ListIndexesOptions) *mongo.Cursor); ok {
		r0 = rf(ctx, collectionName, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mongo.Cursor)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, ...*options.ListIndexesOptions) error); ok {
		r1 = rf(ctx, collectionName, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockManager_ListIndexes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListIndexes'
type MockManager_ListIndexes_Call struct {
	*mock.Call
}

// ListIndexes is a helper method to define mock.On call
//   - ctx context.Context
//   - collectionName string
//   - opts ...*options.ListIndexesOptions
func (_e *MockManager_Expecter) ListIndexes(ctx interface{}, collectionName interface{}, opts ...interface{}) *MockManager_ListIndexes_Call {
	return &MockManager_ListIndexes_Call{Call: _e.mock.On("ListIndexes",
		append([]interface{}{ctx, collectionName}, opts...)...)}
}

func (_c *MockManager_ListIndexes_Call) Run(run func(ctx context.Context, collectionName string, opts ...*options.ListIndexesOptions)) *MockManager_ListIndexes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]*options.ListIndexesOptions, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(*options.ListIndexesOptions)
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockManager_ListIndexes_Call) Return(_a0 *mongo.Cursor, _a1 error) *MockManager_ListIndexes_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockManager_ListIndexes_Call) RunAndReturn(run func(context.Context, string, ...*options.ListIndexesOptions) (*mongo.Cursor, error)) *MockManager_ListIndexes_Call {
	_c.Call.Return(run)
	return _c
}

// ListIndexesWithDatabase provides a mock function with given fields: ctx, dbName, collectionName, opts
func (_m *MockManager) ListIndexesWithDatabase(ctx context.Context, dbName string, collectionName string, opts ...*options.ListIndexesOptions) (*mongo.Cursor, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, dbName, collectionName)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListIndexesWithDatabase")
	}

	var r0 *mongo.Cursor
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, ...*options.ListIndexesOptions) (*mongo.Cursor, error)); ok {
		return rf(ctx, dbName, collectionName, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, ...*options.ListIndexesOptions) *mongo.Cursor); ok {
		r0 = rf(ctx, dbName, collectionName, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mongo.Cursor)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, ...*options.ListIndexesOptions) error); ok {
		r1 = rf(ctx, dbName, collectionName, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockManager_ListIndexesWithDatabase_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListIndexesWithDatabase'
type MockManager_ListIndexesWithDatabase_Call struct {
	*mock.Call
}

// ListIndexesWithDatabase is a helper method to define mock.On call
//   - ctx context.Context
//   - dbName string
//   - collectionName string
//   - opts ...*options.ListIndexesOptions
func (_e *MockManager_Expecter) ListIndexesWithDatabase(ctx interface{}, dbName interface{}, collectionName interface{}, opts ...interface{}) *MockManager_ListIndexesWithDatabase_Call {
	return &MockManager_ListIndexesWithDatabase_Call{Call: _e.mock.On("ListIndexesWithDatabase",
		append([]interface{}{ctx, dbName, collectionName}, opts...)...)}
}

func (_c *MockManager_ListIndexesWithDatabase_Call) Run(run func(ctx context.Context, dbName string, collectionName string, opts ...*options.ListIndexesOptions)) *MockManager_ListIndexesWithDatabase_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]*options.ListIndexesOptions, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(*options.ListIndexesOptions)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockManager_ListIndexesWithDatabase_Call) Return(_a0 *mongo.Cursor, _a1 error) *MockManager_ListIndexesWithDatabase_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockManager_ListIndexesWithDatabase_Call) RunAndReturn(run func(context.Context, string, string, ...*options.ListIndexesOptions) (*mongo.Cursor, error)) *MockManager_ListIndexesWithDatabase_Call {
	_c.Call.Return(run)
	return _c
}

// Ping provides a mock function with given fields: ctx
func (_m *MockManager) Ping(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Ping")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockManager_Ping_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Ping'
type MockManager_Ping_Call struct {
	*mock.Call
}

// Ping is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockManager_Expecter) Ping(ctx interface{}) *MockManager_Ping_Call {
	return &MockManager_Ping_Call{Call: _e.mock.On("Ping", ctx)}
}

func (_c *MockManager_Ping_Call) Run(run func(ctx context.Context)) *MockManager_Ping_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockManager_Ping_Call) Return(_a0 error) *MockManager_Ping_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockManager_Ping_Call) RunAndReturn(run func(context.Context) error) *MockManager_Ping_Call {
	_c.Call.Return(run)
	return _c
}

// StartSession provides a mock function with given fields: opts
func (_m *MockManager) StartSession(opts ...*options.SessionOptions) (mongo.Session, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartSession")
	}

	var r0 mongo.Session
	var r1 error
	if rf, ok := ret.Get(0).(func(...*options.SessionOptions) (mongo.Session, error)); ok {
		return rf(opts...)
	}
	if rf, ok := ret.Get(0).(func(...*options.SessionOptions) mongo.Session); ok {
		r0 = rf(opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(mongo.Session)
		}
	}

	if rf, ok := ret.Get(1).(func(...*options.SessionOptions) error); ok {
		r1 = rf(opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockManager_StartSession_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StartSession'
type MockManager_StartSession_Call struct {
	*mock.Call
}

// StartSession is a helper method to define mock.On call
//   - opts ...*options.SessionOptions
func (_e *MockManager_Expecter) StartSession(opts ...interface{}) *MockManager_StartSession_Call {
	return &MockManager_StartSession_Call{Call: _e.mock.On("StartSession",
		append([]interface{}{}, opts...)...)}
}

func (_c *MockManager_StartSession_Call) Run(run func(opts ...*options.SessionOptions)) *MockManager_StartSession_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]*options.SessionOptions, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(*options.SessionOptions)
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *MockManager_StartSession_Call) Return(_a0 mongo.Session, _a1 error) *MockManager_StartSession_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockManager_StartSession_Call) RunAndReturn(run func(...*options.SessionOptions) (mongo.Session, error)) *MockManager_StartSession_Call {
	_c.Call.Return(run)
	return _c
}

// Stats provides a mock function with given fields: ctx
func (_m *MockManager) Stats(ctx context.Context) (map[string]interface{}, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Stats")
	}

	var r0 map[string]interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (map[string]interface{}, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) map[string]interface{}); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockManager_Stats_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stats'
type MockManager_Stats_Call struct {
	*mock.Call
}

// Stats is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockManager_Expecter) Stats(ctx interface{}) *MockManager_Stats_Call {
	return &MockManager_Stats_Call{Call: _e.mock.On("Stats", ctx)}
}

func (_c *MockManager_Stats_Call) Run(run func(ctx context.Context)) *MockManager_Stats_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockManager_Stats_Call) Return(_a0 map[string]interface{}, _a1 error) *MockManager_Stats_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockManager_Stats_Call) RunAndReturn(run func(context.Context) (map[string]interface{}, error)) *MockManager_Stats_Call {
	_c.Call.Return(run)
	return _c
}

// UseSession provides a mock function with given fields: ctx, fn
func (_m *MockManager) UseSession(ctx context.Context, fn func(mongo.SessionContext) error) error {
	ret := _m.Called(ctx, fn)

	if len(ret) == 0 {
		panic("no return value specified for UseSession")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, func(mongo.SessionContext) error) error); ok {
		r0 = rf(ctx, fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockManager_UseSession_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UseSession'
type MockManager_UseSession_Call struct {
	*mock.Call
}

// UseSession is a helper method to define mock.On call
//   - ctx context.Context
//   - fn func(mongo.SessionContext) error
func (_e *MockManager_Expecter) UseSession(ctx interface{}, fn interface{}) *MockManager_UseSession_Call {
	return &MockManager_UseSession_Call{Call: _e.mock.On("UseSession", ctx, fn)}
}

func (_c *MockManager_UseSession_Call) Run(run func(ctx context.Context, fn func(mongo.SessionContext) error)) *MockManager_UseSession_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(func(mongo.SessionContext) error))
	})
	return _c
}

func (_c *MockManager_UseSession_Call) Return(_a0 error) *MockManager_UseSession_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockManager_UseSession_Call) RunAndReturn(run func(context.Context, func(mongo.SessionContext) error) error) *MockManager_UseSession_Call {
	_c.Call.Return(run)
	return _c
}

// UseSessionWithTransaction provides a mock function with given fields: ctx, fn, opts
func (_m *MockManager) UseSessionWithTransaction(ctx context.Context, fn func(mongo.SessionContext) (interface{}, error), opts ...*options.TransactionOptions) (interface{}, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, fn)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UseSessionWithTransaction")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, func(mongo.SessionContext) (interface{}, error), ...*options.TransactionOptions) (interface{}, error)); ok {
		return rf(ctx, fn, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, func(mongo.SessionContext) (interface{}, error), ...*options.TransactionOptions) interface{}); ok {
		r0 = rf(ctx, fn, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, func(mongo.SessionContext) (interface{}, error), ...*options.TransactionOptions) error); ok {
		r1 = rf(ctx, fn, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockManager_UseSessionWithTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UseSessionWithTransaction'
type MockManager_UseSessionWithTransaction_Call struct {
	*mock.Call
}

// UseSessionWithTransaction is a helper method to define mock.On call
//   - ctx context.Context
//   - fn func(mongo.SessionContext)(interface{} , error)
//   - opts ...*options.TransactionOptions
func (_e *MockManager_Expecter) UseSessionWithTransaction(ctx interface{}, fn interface{}, opts ...interface{}) *MockManager_UseSessionWithTransaction_Call {
	return &MockManager_UseSessionWithTransaction_Call{Call: _e.mock.On("UseSessionWithTransaction",
		append([]interface{}{ctx, fn}, opts...)...)}
}

func (_c *MockManager_UseSessionWithTransaction_Call) Run(run func(ctx context.Context, fn func(mongo.SessionContext) (interface{}, error), opts ...*options.TransactionOptions)) *MockManager_UseSessionWithTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]*options.TransactionOptions, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(*options.TransactionOptions)
			}
		}
		run(args[0].(context.Context), args[1].(func(mongo.SessionContext) (interface{}, error)), variadicArgs...)
	})
	return _c
}

func (_c *MockManager_UseSessionWithTransaction_Call) Return(_a0 interface{}, _a1 error) *MockManager_UseSessionWithTransaction_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockManager_UseSessionWithTransaction_Call) RunAndReturn(run func(context.Context, func(mongo.SessionContext) (interface{}, error), ...*options.TransactionOptions) (interface{}, error)) *MockManager_UseSessionWithTransaction_Call {
	_c.Call.Return(run)
	return _c
}

// Watch provides a mock function with given fields: ctx, pipeline, opts
func (_m *MockManager) Watch(ctx context.Context, pipeline interface{}, opts ...*options.ChangeStreamOptions) (*mongo.ChangeStream, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, pipeline)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Watch")
	}

	var r0 *mongo.ChangeStream
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, ...*options.ChangeStreamOptions) (*mongo.ChangeStream, error)); ok {
		return rf(ctx, pipeline, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, ...*options.ChangeStreamOptions) *mongo.ChangeStream); ok {
		r0 = rf(ctx, pipeline, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mongo.ChangeStream)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, interface{}, ...*options.ChangeStreamOptions) error); ok {
		r1 = rf(ctx, pipeline, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockManager_Watch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Watch'
type MockManager_Watch_Call struct {
	*mock.Call
}

// Watch is a helper method to define mock.On call
//   - ctx context.Context
//   - pipeline interface{}
//   - opts ...*options.ChangeStreamOptions
func (_e *MockManager_Expecter) Watch(ctx interface{}, pipeline interface{}, opts ...interface{}) *MockManager_Watch_Call {
	return &MockManager_Watch_Call{Call: _e.mock.On("Watch",
		append([]interface{}{ctx, pipeline}, opts...)...)}
}

func (_c *MockManager_Watch_Call) Run(run func(ctx context.Context, pipeline interface{}, opts ...*options.ChangeStreamOptions)) *MockManager_Watch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]*options.ChangeStreamOptions, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(*options.ChangeStreamOptions)
			}
		}
		run(args[0].(context.Context), args[1].(interface{}), variadicArgs...)
	})
	return _c
}

func (_c *MockManager_Watch_Call) Return(_a0 *mongo.ChangeStream, _a1 error) *MockManager_Watch_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockManager_Watch_Call) RunAndReturn(run func(context.Context, interface{}, ...*options.ChangeStreamOptions) (*mongo.ChangeStream, error)) *MockManager_Watch_Call {
	_c.Call.Return(run)
	return _c
}

// WatchAllDatabases provides a mock function with given fields: ctx, pipeline, opts
func (_m *MockManager) WatchAllDatabases(ctx context.Context, pipeline interface{}, opts ...*options.ChangeStreamOptions) (*mongo.ChangeStream, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, pipeline)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for WatchAllDatabases")
	}

	var r0 *mongo.ChangeStream
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, ...*options.ChangeStreamOptions) (*mongo.ChangeStream, error)); ok {
		return rf(ctx, pipeline, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, ...*options.ChangeStreamOptions) *mongo.ChangeStream); ok {
		r0 = rf(ctx, pipeline, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mongo.ChangeStream)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, interface{}, ...*options.ChangeStreamOptions) error); ok {
		r1 = rf(ctx, pipeline, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockManager_WatchAllDatabases_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WatchAllDatabases'
type MockManager_WatchAllDatabases_Call struct {
	*mock.Call
}

// WatchAllDatabases is a helper method to define mock.On call
//   - ctx context.Context
//   - pipeline interface{}
//   - opts ...*options.ChangeStreamOptions
func (_e *MockManager_Expecter) WatchAllDatabases(ctx interface{}, pipeline interface{}, opts ...interface{}) *MockManager_WatchAllDatabases_Call {
	return &MockManager_WatchAllDatabases_Call{Call: _e.mock.On("WatchAllDatabases",
		append([]interface{}{ctx, pipeline}, opts...)...)}
}

func (_c *MockManager_WatchAllDatabases_Call) Run(run func(ctx context.Context, pipeline interface{}, opts ...*options.ChangeStreamOptions)) *MockManager_WatchAllDatabases_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]*options.ChangeStreamOptions, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(*options.ChangeStreamOptions)
			}
		}
		run(args[0].(context.Context), args[1].(interface{}), variadicArgs...)
	})
	return _c
}

func (_c *MockManager_WatchAllDatabases_Call) Return(_a0 *mongo.ChangeStream, _a1 error) *MockManager_WatchAllDatabases_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockManager_WatchAllDatabases_Call) RunAndReturn(run func(context.Context, interface{}, ...*options.ChangeStreamOptions) (*mongo.ChangeStream, error)) *MockManager_WatchAllDatabases_Call {
	_c.Call.Return(run)
	return _c
}

// WatchCollection provides a mock function with given fields: ctx, collectionName, pipeline, opts
func (_m *MockManager) WatchCollection(ctx context.Context, collectionName string, pipeline interface{}, opts ...*options.ChangeStreamOptions) (*mongo.ChangeStream, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, collectionName, pipeline)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for WatchCollection")
	}

	var r0 *mongo.ChangeStream
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}, ...*options.ChangeStreamOptions) (*mongo.ChangeStream, error)); ok {
		return rf(ctx, collectionName, pipeline, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}, ...*options.ChangeStreamOptions) *mongo.ChangeStream); ok {
		r0 = rf(ctx, collectionName, pipeline, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mongo.ChangeStream)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, interface{}, ...*options.ChangeStreamOptions) error); ok {
		r1 = rf(ctx, collectionName, pipeline, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockManager_WatchCollection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WatchCollection'
type MockManager_WatchCollection_Call struct {
	*mock.Call
}

// WatchCollection is a helper method to define mock.On call
//   - ctx context.Context
//   - collectionName string
//   - pipeline interface{}
//   - opts ...*options.ChangeStreamOptions
func (_e *MockManager_Expecter) WatchCollection(ctx interface{}, collectionName interface{}, pipeline interface{}, opts ...interface{}) *MockManager_WatchCollection_Call {
	return &MockManager_WatchCollection_Call{Call: _e.mock.On("WatchCollection",
		append([]interface{}{ctx, collectionName, pipeline}, opts...)...)}
}

func (_c *MockManager_WatchCollection_Call) Run(run func(ctx context.Context, collectionName string, pipeline interface{}, opts ...*options.ChangeStreamOptions)) *MockManager_WatchCollection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]*options.ChangeStreamOptions, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(*options.ChangeStreamOptions)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(interface{}), variadicArgs...)
	})
	return _c
}

func (_c *MockManager_WatchCollection_Call) Return(_a0 *mongo.ChangeStream, _a1 error) *MockManager_WatchCollection_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockManager_WatchCollection_Call) RunAndReturn(run func(context.Context, string, interface{}, ...*options.ChangeStreamOptions) (*mongo.ChangeStream, error)) *MockManager_WatchCollection_Call {
	_c.Call.Return(run)
	return _c
}

// WatchCollectionWithDatabase provides a mock function with given fields: ctx, dbName, collectionName, pipeline, opts
func (_m *MockManager) WatchCollectionWithDatabase(ctx context.Context, dbName string, collectionName string, pipeline interface{}, opts ...*options.ChangeStreamOptions) (*mongo.ChangeStream, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, dbName, collectionName, pipeline)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for WatchCollectionWithDatabase")
	}

	var r0 *mongo.ChangeStream
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, interface{}, ...*options.ChangeStreamOptions) (*mongo.ChangeStream, error)); ok {
		return rf(ctx, dbName, collectionName, pipeline, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, interface{}, ...*options.ChangeStreamOptions) *mongo.ChangeStream); ok {
		r0 = rf(ctx, dbName, collectionName, pipeline, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mongo.ChangeStream)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, interface{}, ...*options.ChangeStreamOptions) error); ok {
		r1 = rf(ctx, dbName, collectionName, pipeline, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockManager_WatchCollectionWithDatabase_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WatchCollectionWithDatabase'
type MockManager_WatchCollectionWithDatabase_Call struct {
	*mock.Call
}

// WatchCollectionWithDatabase is a helper method to define mock.On call
//   - ctx context.Context
//   - dbName string
//   - collectionName string
//   - pipeline interface{}
//   - opts ...*options.ChangeStreamOptions
func (_e *MockManager_Expecter) WatchCollectionWithDatabase(ctx interface{}, dbName interface{}, collectionName interface{}, pipeline interface{}, opts ...interface{}) *MockManager_WatchCollectionWithDatabase_Call {
	return &MockManager_WatchCollectionWithDatabase_Call{Call: _e.mock.On("WatchCollectionWithDatabase",
		append([]interface{}{ctx, dbName, collectionName, pipeline}, opts...)...)}
}

func (_c *MockManager_WatchCollectionWithDatabase_Call) Run(run func(ctx context.Context, dbName string, collectionName string, pipeline interface{}, opts ...*options.ChangeStreamOptions)) *MockManager_WatchCollectionWithDatabase_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]*options.ChangeStreamOptions, len(args)-4)
		for i, a := range args[4:] {
			if a != nil {
				variadicArgs[i] = a.(*options.ChangeStreamOptions)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(interface{}), variadicArgs...)
	})
	return _c
}

func (_c *MockManager_WatchCollectionWithDatabase_Call) Return(_a0 *mongo.ChangeStream, _a1 error) *MockManager_WatchCollectionWithDatabase_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockManager_WatchCollectionWithDatabase_Call) RunAndReturn(run func(context.Context, string, string, interface{}, ...*options.ChangeStreamOptions) (*mongo.ChangeStream, error)) *MockManager_WatchCollectionWithDatabase_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockManager creates a new instance of MockManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockManager {
	mock := &MockManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
